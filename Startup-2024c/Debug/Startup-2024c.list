
Startup-2024c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006200  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080063a0  080063a0  000163a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064b0  080064b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080064b0  080064b0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064b0  080064b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b4  080064b4  000164b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080064b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001b10  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001b84  20001b84  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a477  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ba  00000000  00000000  0003a51b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001398  00000000  00000000  0003d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001260  00000000  00000000  0003ec70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022525  00000000  00000000  0003fed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018768  00000000  00000000  000623f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d34bb  00000000  00000000  0007ab5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e018  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054e4  00000000  00000000  0014e068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006388 	.word	0x08006388

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006388 	.word	0x08006388

080001e0 <LED_Toggle>:

//  ---------------------------------------
//  5.     G L O B A L    F U N C T I O N S
//  ---------------------------------------
void LED_Toggle(int led)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    switch (led)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b03      	cmp	r3, #3
 80001ec:	d821      	bhi.n	8000232 <LED_Toggle+0x52>
 80001ee:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <LED_Toggle+0x14>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	08000205 	.word	0x08000205
 80001f8:	08000211 	.word	0x08000211
 80001fc:	0800021d 	.word	0x0800021d
 8000200:	08000229 	.word	0x08000229
    {
    case LED_1:
        HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000204:	2120      	movs	r1, #32
 8000206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020a:	f000 fe4d 	bl	8000ea8 <HAL_GPIO_TogglePin>
        break;
 800020e:	e011      	b.n	8000234 <LED_Toggle+0x54>
    case LED_2:
        HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 8000210:	2140      	movs	r1, #64	; 0x40
 8000212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000216:	f000 fe47 	bl	8000ea8 <HAL_GPIO_TogglePin>
        break;
 800021a:	e00b      	b.n	8000234 <LED_Toggle+0x54>
    case LED_3:
        HAL_GPIO_TogglePin(LED_3_GPIO_Port, LED_3_Pin);
 800021c:	2180      	movs	r1, #128	; 0x80
 800021e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000222:	f000 fe41 	bl	8000ea8 <HAL_GPIO_TogglePin>
        break;
 8000226:	e005      	b.n	8000234 <LED_Toggle+0x54>
    case LED_4:
        HAL_GPIO_TogglePin(LED_4_GPIO_Port, LED_4_Pin);
 8000228:	2140      	movs	r1, #64	; 0x40
 800022a:	4804      	ldr	r0, [pc, #16]	; (800023c <LED_Toggle+0x5c>)
 800022c:	f000 fe3c 	bl	8000ea8 <HAL_GPIO_TogglePin>
        break;
 8000230:	e000      	b.n	8000234 <LED_Toggle+0x54>
    default:
        break;
 8000232:	bf00      	nop
    }
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	48000400 	.word	0x48000400

08000240 <LED_Set>:

void LED_Set(int led, bool state)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	460b      	mov	r3, r1
 800024a:	70fb      	strb	r3, [r7, #3]
    switch (led)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2b03      	cmp	r3, #3
 8000250:	d835      	bhi.n	80002be <LED_Set+0x7e>
 8000252:	a201      	add	r2, pc, #4	; (adr r2, 8000258 <LED_Set+0x18>)
 8000254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000258:	08000269 	.word	0x08000269
 800025c:	0800027f 	.word	0x0800027f
 8000260:	08000295 	.word	0x08000295
 8000264:	080002ab 	.word	0x080002ab
    {
    case LED_1:
        HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, !state);
 8000268:	78fb      	ldrb	r3, [r7, #3]
 800026a:	f083 0301 	eor.w	r3, r3, #1
 800026e:	b2db      	uxtb	r3, r3
 8000270:	461a      	mov	r2, r3
 8000272:	2120      	movs	r1, #32
 8000274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000278:	f000 fdfe 	bl	8000e78 <HAL_GPIO_WritePin>
        break;
 800027c:	e020      	b.n	80002c0 <LED_Set+0x80>
    case LED_2:
        HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, !state);
 800027e:	78fb      	ldrb	r3, [r7, #3]
 8000280:	f083 0301 	eor.w	r3, r3, #1
 8000284:	b2db      	uxtb	r3, r3
 8000286:	461a      	mov	r2, r3
 8000288:	2140      	movs	r1, #64	; 0x40
 800028a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800028e:	f000 fdf3 	bl	8000e78 <HAL_GPIO_WritePin>
        break;
 8000292:	e015      	b.n	80002c0 <LED_Set+0x80>
    case LED_3:
        HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, !state);
 8000294:	78fb      	ldrb	r3, [r7, #3]
 8000296:	f083 0301 	eor.w	r3, r3, #1
 800029a:	b2db      	uxtb	r3, r3
 800029c:	461a      	mov	r2, r3
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a4:	f000 fde8 	bl	8000e78 <HAL_GPIO_WritePin>
        break;
 80002a8:	e00a      	b.n	80002c0 <LED_Set+0x80>
    case LED_4:
        HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, !state);
 80002aa:	78fb      	ldrb	r3, [r7, #3]
 80002ac:	f083 0301 	eor.w	r3, r3, #1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	461a      	mov	r2, r3
 80002b4:	2140      	movs	r1, #64	; 0x40
 80002b6:	4804      	ldr	r0, [pc, #16]	; (80002c8 <LED_Set+0x88>)
 80002b8:	f000 fdde 	bl	8000e78 <HAL_GPIO_WritePin>
        break;
 80002bc:	e000      	b.n	80002c0 <LED_Set+0x80>
    default:
        break;
 80002be:	bf00      	nop
    }
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	48000400 	.word	0x48000400

080002cc <Taster_Treiber_Task>:

//  -------------------------------------------
//  4.     I N T E R N A L    F U N C T I O N S
//  -------------------------------------------
void Taster_Treiber_Task(void *argument)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
    while (1)
    {
        TASTER_1_STATUS = !HAL_GPIO_ReadPin(GPIOA, TASTER_1_Pin);
 80002d4:	2102      	movs	r1, #2
 80002d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002da:	f000 fdb5 	bl	8000e48 <HAL_GPIO_ReadPin>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	bf0c      	ite	eq
 80002e4:	2301      	moveq	r3, #1
 80002e6:	2300      	movne	r3, #0
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <Taster_Treiber_Task+0x5c>)
 80002ec:	701a      	strb	r2, [r3, #0]
        TASTER_2_STATUS = !HAL_GPIO_ReadPin(GPIOA, TASTER_2_Pin);
 80002ee:	2110      	movs	r1, #16
 80002f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f4:	f000 fda8 	bl	8000e48 <HAL_GPIO_ReadPin>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	bf0c      	ite	eq
 80002fe:	2301      	moveq	r3, #1
 8000300:	2300      	movne	r3, #0
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <Taster_Treiber_Task+0x60>)
 8000306:	701a      	strb	r2, [r3, #0]
        TASTER_3_STATUS = !HAL_GPIO_ReadPin(TASTER_3_GPIO_Port, TASTER_3_Pin);
 8000308:	2101      	movs	r1, #1
 800030a:	4809      	ldr	r0, [pc, #36]	; (8000330 <Taster_Treiber_Task+0x64>)
 800030c:	f000 fd9c 	bl	8000e48 <HAL_GPIO_ReadPin>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	bf0c      	ite	eq
 8000316:	2301      	moveq	r3, #1
 8000318:	2300      	movne	r3, #0
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <Taster_Treiber_Task+0x68>)
 800031e:	701a      	strb	r2, [r3, #0]
        osDelay(50);
 8000320:	2032      	movs	r0, #50	; 0x32
 8000322:	f003 fad5 	bl	80038d0 <osDelay>
        TASTER_1_STATUS = !HAL_GPIO_ReadPin(GPIOA, TASTER_1_Pin);
 8000326:	e7d5      	b.n	80002d4 <Taster_Treiber_Task+0x8>
 8000328:	20000090 	.word	0x20000090
 800032c:	20000091 	.word	0x20000091
 8000330:	48000400 	.word	0x48000400
 8000334:	20000092 	.word	0x20000092

08000338 <Taster_Get>:

//  ---------------------------------------
//  5.     G L O B A L    F U N C T I O N S
//  ---------------------------------------
bool Taster_Get(int taster)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
    switch (taster)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b02      	cmp	r3, #2
 8000344:	d00f      	beq.n	8000366 <Taster_Get+0x2e>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b02      	cmp	r3, #2
 800034a:	dc0f      	bgt.n	800036c <Taster_Get+0x34>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d003      	beq.n	800035a <Taster_Get+0x22>
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d003      	beq.n	8000360 <Taster_Get+0x28>
 8000358:	e008      	b.n	800036c <Taster_Get+0x34>
    {
    case TASTER_1:
        return TASTER_1_STATUS;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <Taster_Get+0x44>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	e006      	b.n	800036e <Taster_Get+0x36>
    case TASTER_2:
        return TASTER_2_STATUS;
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <Taster_Get+0x48>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	e003      	b.n	800036e <Taster_Get+0x36>
    case TASTER_3:
        return TASTER_3_STATUS;
 8000366:	4b07      	ldr	r3, [pc, #28]	; (8000384 <Taster_Get+0x4c>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	e000      	b.n	800036e <Taster_Get+0x36>
    default:
        return false;
 800036c:	2300      	movs	r3, #0
    }
}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	20000090 	.word	0x20000090
 8000380:	20000091 	.word	0x20000091
 8000384:	20000092 	.word	0x20000092

08000388 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038c:	f000 faba 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000390:	f000 f826 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000394:	f000 f8b2 	bl	80004fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000398:	f000 f880 	bl	800049c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800039c:	f003 f986 	bl	80036ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003a0:	4a09      	ldr	r2, [pc, #36]	; (80003c8 <main+0x40>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	4809      	ldr	r0, [pc, #36]	; (80003cc <main+0x44>)
 80003a6:	f003 f9e9 	bl	800377c <osThreadNew>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4a08      	ldr	r2, [pc, #32]	; (80003d0 <main+0x48>)
 80003ae:	6013      	str	r3, [r2, #0]

  /* creation of tasterTask */
  tasterTaskHandle = osThreadNew(Taster_Treiber_Task, NULL, &tasterTask_attributes);
 80003b0:	4a08      	ldr	r2, [pc, #32]	; (80003d4 <main+0x4c>)
 80003b2:	2100      	movs	r1, #0
 80003b4:	4808      	ldr	r0, [pc, #32]	; (80003d8 <main+0x50>)
 80003b6:	f003 f9e1 	bl	800377c <osThreadNew>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4a07      	ldr	r2, [pc, #28]	; (80003dc <main+0x54>)
 80003be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003c0:	f003 f9a8 	bl	8003714 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <main+0x3c>
 80003c6:	bf00      	nop
 80003c8:	080063d0 	.word	0x080063d0
 80003cc:	08000625 	.word	0x08000625
 80003d0:	2000011c 	.word	0x2000011c
 80003d4:	080063f4 	.word	0x080063f4
 80003d8:	080002cd 	.word	0x080002cd
 80003dc:	20000120 	.word	0x20000120

080003e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b0a6      	sub	sp, #152	; 0x98
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ea:	2228      	movs	r2, #40	; 0x28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f005 ff00 	bl	80061f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2258      	movs	r2, #88	; 0x58
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f005 fef2 	bl	80061f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000410:	2302      	movs	r3, #2
 8000412:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000414:	2301      	movs	r3, #1
 8000416:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000418:	2310      	movs	r3, #16
 800041a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041e:	2302      	movs	r3, #2
 8000420:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000428:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800042c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000430:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800043e:	4618      	mov	r0, r3
 8000440:	f000 fd4c 	bl	8000edc <HAL_RCC_OscConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800044a:	f000 f91f 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800044e:	230f      	movs	r3, #15
 8000450:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000452:	2302      	movs	r3, #2
 8000454:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800045a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800045e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000464:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000468:	2102      	movs	r1, #2
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fd8a 	bl	8001f84 <HAL_RCC_ClockConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000476:	f000 f909 	bl	800068c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800047a:	2302      	movs	r3, #2
 800047c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4618      	mov	r0, r3
 8000486:	f001 ffe5 	bl	8002454 <HAL_RCCEx_PeriphCLKConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000490:	f000 f8fc 	bl	800068c <Error_Handler>
  }
}
 8000494:	bf00      	nop
 8000496:	3798      	adds	r7, #152	; 0x98
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004a2:	4a15      	ldr	r2, [pc, #84]	; (80004f8 <MX_USART2_UART_Init+0x5c>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004a6:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_USART2_UART_Init+0x58>)
 80004e0:	f002 fcac 	bl	8002e3c <HAL_UART_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004ea:	f000 f8cf 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000094 	.word	0x20000094
 80004f8:	40004400 	.word	0x40004400

080004fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	; 0x28
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b41      	ldr	r3, [pc, #260]	; (8000618 <MX_GPIO_Init+0x11c>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a40      	ldr	r2, [pc, #256]	; (8000618 <MX_GPIO_Init+0x11c>)
 8000518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b3e      	ldr	r3, [pc, #248]	; (8000618 <MX_GPIO_Init+0x11c>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052a:	4b3b      	ldr	r3, [pc, #236]	; (8000618 <MX_GPIO_Init+0x11c>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a3a      	ldr	r2, [pc, #232]	; (8000618 <MX_GPIO_Init+0x11c>)
 8000530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b38      	ldr	r3, [pc, #224]	; (8000618 <MX_GPIO_Init+0x11c>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b35      	ldr	r3, [pc, #212]	; (8000618 <MX_GPIO_Init+0x11c>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a34      	ldr	r2, [pc, #208]	; (8000618 <MX_GPIO_Init+0x11c>)
 8000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b32      	ldr	r3, [pc, #200]	; (8000618 <MX_GPIO_Init+0x11c>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <MX_GPIO_Init+0x11c>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a2e      	ldr	r2, [pc, #184]	; (8000618 <MX_GPIO_Init+0x11c>)
 8000560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b2c      	ldr	r3, [pc, #176]	; (8000618 <MX_GPIO_Init+0x11c>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin | LED_2_Pin | LED_3_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	21e0      	movs	r1, #224	; 0xe0
 8000576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057a:	f000 fc7d 	bl	8000e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2140      	movs	r1, #64	; 0x40
 8000582:	4826      	ldr	r0, [pc, #152]	; (800061c <MX_GPIO_Init+0x120>)
 8000584:	f000 fc78 	bl	8000e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800058c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800058e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	4820      	ldr	r0, [pc, #128]	; (8000620 <MX_GPIO_Init+0x124>)
 80005a0:	f000 fac8 	bl	8000b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : TASTER_1_Pin TASTER_2_Pin */
  GPIO_InitStruct.Pin = TASTER_1_Pin | TASTER_2_Pin;
 80005a4:	2312      	movs	r3, #18
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4619      	mov	r1, r3
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f000 fabb 	bl	8000b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin;
 80005be:	23e0      	movs	r3, #224	; 0xe0
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d8:	f000 faac 	bl	8000b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : TASTER_3_Pin */
  GPIO_InitStruct.Pin = TASTER_3_Pin;
 80005dc:	2301      	movs	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TASTER_3_GPIO_Port, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	480b      	ldr	r0, [pc, #44]	; (800061c <MX_GPIO_Init+0x120>)
 80005f0:	f000 faa0 	bl	8000b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_4_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin;
 80005f4:	2340      	movs	r3, #64	; 0x40
 80005f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_4_GPIO_Port, &GPIO_InitStruct);
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	4619      	mov	r1, r3
 800060a:	4804      	ldr	r0, [pc, #16]	; (800061c <MX_GPIO_Init+0x120>)
 800060c:	f000 fa92 	bl	8000b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	; 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	48000400 	.word	0x48000400
 8000620:	48000800 	.word	0x48000800

08000624 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  // Toggle LED_1
  while (1)
  {
    LED_Set(LED_1, Taster_Get(TASTER_1));
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff fe83 	bl	8000338 <Taster_Get>
 8000632:	4603      	mov	r3, r0
 8000634:	4619      	mov	r1, r3
 8000636:	2000      	movs	r0, #0
 8000638:	f7ff fe02 	bl	8000240 <LED_Set>

    if (Taster_Get(TASTER_3))
 800063c:	2002      	movs	r0, #2
 800063e:	f7ff fe7b 	bl	8000338 <Taster_Get>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d003      	beq.n	8000650 <StartDefaultTask+0x2c>
    {
      LED_Toggle(LED_3);
 8000648:	2002      	movs	r0, #2
 800064a:	f7ff fdc9 	bl	80001e0 <LED_Toggle>
 800064e:	e003      	b.n	8000658 <StartDefaultTask+0x34>
    }
    else
    {
      LED_Set(LED_3, false);
 8000650:	2100      	movs	r1, #0
 8000652:	2002      	movs	r0, #2
 8000654:	f7ff fdf4 	bl	8000240 <LED_Set>
    }

    LED_Toggle(LED_2);
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff fdc1 	bl	80001e0 <LED_Toggle>

    osDelay(100);
 800065e:	2064      	movs	r0, #100	; 0x64
 8000660:	f003 f936 	bl	80038d0 <osDelay>
    LED_Set(LED_1, Taster_Get(TASTER_1));
 8000664:	e7e2      	b.n	800062c <StartDefaultTask+0x8>
	...

08000668 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d101      	bne.n	800067e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800067a:	f000 f959 	bl	8000930 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40012c00 	.word	0x40012c00

0800068c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <HAL_MspInit+0x4c>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <HAL_MspInit+0x4c>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <HAL_MspInit+0x4c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <HAL_MspInit+0x4c>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <HAL_MspInit+0x4c>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <HAL_MspInit+0x4c>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	210f      	movs	r1, #15
 80006d2:	f06f 0001 	mvn.w	r0, #1
 80006d6:	f000 fa03 	bl	8000ae0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a17      	ldr	r2, [pc, #92]	; (8000764 <HAL_UART_MspInit+0x7c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d128      	bne.n	800075c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <HAL_UART_MspInit+0x80>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a16      	ldr	r2, [pc, #88]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_UART_MspInit+0x80>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800073a:	230c      	movs	r3, #12
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800074a:	2307      	movs	r3, #7
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f000 f9ec 	bl	8000b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	; 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40004400 	.word	0x40004400
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08c      	sub	sp, #48	; 0x30
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800077c:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <HAL_InitTick+0xcc>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a2d      	ldr	r2, [pc, #180]	; (8000838 <HAL_InitTick+0xcc>)
 8000782:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <HAL_InitTick+0xcc>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000794:	f107 020c 	add.w	r2, r7, #12
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fe26 	bl	80023f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007a4:	f001 fe02 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 80007a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ac:	4a23      	ldr	r2, [pc, #140]	; (800083c <HAL_InitTick+0xd0>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	0c9b      	lsrs	r3, r3, #18
 80007b4:	3b01      	subs	r3, #1
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <HAL_InitTick+0xd4>)
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <HAL_InitTick+0xd8>)
 80007bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <HAL_InitTick+0xd4>)
 80007c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007c6:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <HAL_InitTick+0xd4>)
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <HAL_InitTick+0xd4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <HAL_InitTick+0xd4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d8:	4b19      	ldr	r3, [pc, #100]	; (8000840 <HAL_InitTick+0xd4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80007de:	4818      	ldr	r0, [pc, #96]	; (8000840 <HAL_InitTick+0xd4>)
 80007e0:	f002 f856 	bl	8002890 <HAL_TIM_Base_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80007ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d11b      	bne.n	800082a <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80007f2:	4813      	ldr	r0, [pc, #76]	; (8000840 <HAL_InitTick+0xd4>)
 80007f4:	f002 f8ae 	bl	8002954 <HAL_TIM_Base_Start_IT>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80007fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000802:	2b00      	cmp	r3, #0
 8000804:	d111      	bne.n	800082a <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000806:	2019      	movs	r0, #25
 8000808:	f000 f986 	bl	8000b18 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b0f      	cmp	r3, #15
 8000810:	d808      	bhi.n	8000824 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000812:	2200      	movs	r2, #0
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	2019      	movs	r0, #25
 8000818:	f000 f962 	bl	8000ae0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_InitTick+0xdc>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e002      	b.n	800082a <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800082a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800082e:	4618      	mov	r0, r3
 8000830:	3730      	adds	r7, #48	; 0x30
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	431bde83 	.word	0x431bde83
 8000840:	20000124 	.word	0x20000124
 8000844:	40012c00 	.word	0x40012c00
 8000848:	20000004 	.word	0x20000004

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800087e:	f002 f8d9 	bl	8002a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000124 	.word	0x20000124

0800088c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b4:	480d      	ldr	r0, [pc, #52]	; (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008b6:	490e      	ldr	r1, [pc, #56]	; (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008cc:	4c0b      	ldr	r4, [pc, #44]	; (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008da:	f7ff ffd7 	bl	800088c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008de:	f005 fc55 	bl	800618c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008e2:	f7ff fd51 	bl	8000388 <main>

080008e6 <LoopForever>:

LoopForever:
    b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80008f4:	080064b8 	.word	0x080064b8
  ldr r2, =_sbss
 80008f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80008fc:	20001b84 	.word	0x20001b84

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <HAL_Init+0x28>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a07      	ldr	r2, [pc, #28]	; (800092c <HAL_Init+0x28>)
 800090e:	f043 0310 	orr.w	r3, r3, #16
 8000912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000914:	2003      	movs	r0, #3
 8000916:	f000 f8d8 	bl	8000aca <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091a:	200f      	movs	r0, #15
 800091c:	f7ff ff26 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000920:	f7ff feba 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40022000 	.word	0x40022000

08000930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_IncTick+0x20>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_IncTick+0x24>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_IncTick+0x24>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	20000170 	.word	0x20000170

08000958 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;  
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_GetTick+0x14>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000170 	.word	0x20000170

08000970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800099c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a2:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <__NVIC_GetPriorityGrouping+0x18>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	f003 0307 	and.w	r3, r3, #7
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db0b      	blt.n	80009fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	f003 021f 	and.w	r2, r3, #31
 80009ec:	4907      	ldr	r1, [pc, #28]	; (8000a0c <__NVIC_EnableIRQ+0x38>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	095b      	lsrs	r3, r3, #5
 80009f4:	2001      	movs	r0, #1
 80009f6:	fa00 f202 	lsl.w	r2, r0, r2
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	; (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	; (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	; 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	; 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ff4c 	bl	8000970 <__NVIC_SetPriorityGrouping>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af2:	f7ff ff61 	bl	80009b8 <__NVIC_GetPriorityGrouping>
 8000af6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	68b9      	ldr	r1, [r7, #8]
 8000afc:	6978      	ldr	r0, [r7, #20]
 8000afe:	f7ff ffb1 	bl	8000a64 <NVIC_EncodePriority>
 8000b02:	4602      	mov	r2, r0
 8000b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff80 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff54 	bl	80009d4 <__NVIC_EnableIRQ>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b087      	sub	sp, #28
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b42:	e160      	b.n	8000e06 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	f000 8152 	beq.w	8000e00 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d005      	beq.n	8000b74 <HAL_GPIO_Init+0x40>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d130      	bne.n	8000bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	2203      	movs	r2, #3
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	68da      	ldr	r2, [r3, #12]
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000baa:	2201      	movs	r2, #1
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	091b      	lsrs	r3, r3, #4
 8000bc0:	f003 0201 	and.w	r2, r3, #1
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d017      	beq.n	8000c12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	2203      	movs	r2, #3
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d123      	bne.n	8000c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	08da      	lsrs	r2, r3, #3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3208      	adds	r2, #8
 8000c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	220f      	movs	r2, #15
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	f003 0307 	and.w	r3, r3, #7
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	08da      	lsrs	r2, r3, #3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3208      	adds	r2, #8
 8000c60:	6939      	ldr	r1, [r7, #16]
 8000c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 0203 	and.w	r2, r3, #3
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 80ac 	beq.w	8000e00 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca8:	4b5e      	ldr	r3, [pc, #376]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a5d      	ldr	r2, [pc, #372]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b5b      	ldr	r3, [pc, #364]	; (8000e24 <HAL_GPIO_Init+0x2f0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc0:	4a59      	ldr	r2, [pc, #356]	; (8000e28 <HAL_GPIO_Init+0x2f4>)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	220f      	movs	r2, #15
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cea:	d025      	beq.n	8000d38 <HAL_GPIO_Init+0x204>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a4f      	ldr	r2, [pc, #316]	; (8000e2c <HAL_GPIO_Init+0x2f8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d01f      	beq.n	8000d34 <HAL_GPIO_Init+0x200>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a4e      	ldr	r2, [pc, #312]	; (8000e30 <HAL_GPIO_Init+0x2fc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d019      	beq.n	8000d30 <HAL_GPIO_Init+0x1fc>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a4d      	ldr	r2, [pc, #308]	; (8000e34 <HAL_GPIO_Init+0x300>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d013      	beq.n	8000d2c <HAL_GPIO_Init+0x1f8>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a4c      	ldr	r2, [pc, #304]	; (8000e38 <HAL_GPIO_Init+0x304>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d00d      	beq.n	8000d28 <HAL_GPIO_Init+0x1f4>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a4b      	ldr	r2, [pc, #300]	; (8000e3c <HAL_GPIO_Init+0x308>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d007      	beq.n	8000d24 <HAL_GPIO_Init+0x1f0>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a4a      	ldr	r2, [pc, #296]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d101      	bne.n	8000d20 <HAL_GPIO_Init+0x1ec>
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	e00c      	b.n	8000d3a <HAL_GPIO_Init+0x206>
 8000d20:	2307      	movs	r3, #7
 8000d22:	e00a      	b.n	8000d3a <HAL_GPIO_Init+0x206>
 8000d24:	2305      	movs	r3, #5
 8000d26:	e008      	b.n	8000d3a <HAL_GPIO_Init+0x206>
 8000d28:	2304      	movs	r3, #4
 8000d2a:	e006      	b.n	8000d3a <HAL_GPIO_Init+0x206>
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e004      	b.n	8000d3a <HAL_GPIO_Init+0x206>
 8000d30:	2302      	movs	r3, #2
 8000d32:	e002      	b.n	8000d3a <HAL_GPIO_Init+0x206>
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <HAL_GPIO_Init+0x206>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	f002 0203 	and.w	r2, r2, #3
 8000d40:	0092      	lsls	r2, r2, #2
 8000d42:	4093      	lsls	r3, r2
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d4a:	4937      	ldr	r1, [pc, #220]	; (8000e28 <HAL_GPIO_Init+0x2f4>)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	3302      	adds	r3, #2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d58:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d7c:	4a31      	ldr	r2, [pc, #196]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d82:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000da6:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dd0:	4a1c      	ldr	r2, [pc, #112]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f47f ae97 	bne.w	8000b44 <HAL_GPIO_Init+0x10>
  }
}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	371c      	adds	r7, #28
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40010000 	.word	0x40010000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	48000800 	.word	0x48000800
 8000e34:	48000c00 	.word	0x48000c00
 8000e38:	48001000 	.word	0x48001000
 8000e3c:	48001400 	.word	0x48001400
 8000e40:	48001800 	.word	0x48001800
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691a      	ldr	r2, [r3, #16]
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e001      	b.n	8000e6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e88:	787b      	ldrb	r3, [r7, #1]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e96:	887a      	ldrh	r2, [r7, #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	041a      	lsls	r2, r3, #16
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43d9      	mvns	r1, r3
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	400b      	ands	r3, r1
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	619a      	str	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ee8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000eec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ef2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	f001 b83a 	b.w	8001f76 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 816f 	beq.w	80011f6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f18:	4bb5      	ldr	r3, [pc, #724]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d00c      	beq.n	8000f3e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f24:	4bb2      	ldr	r3, [pc, #712]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	2b08      	cmp	r3, #8
 8000f2e:	d15c      	bne.n	8000fea <HAL_RCC_OscConfig+0x10e>
 8000f30:	4baf      	ldr	r3, [pc, #700]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3c:	d155      	bne.n	8000fea <HAL_RCC_OscConfig+0x10e>
 8000f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f42:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f4a:	fa93 f3a3 	rbit	r3, r3
 8000f4e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f52:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f56:	fab3 f383 	clz	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	095b      	lsrs	r3, r3, #5
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d102      	bne.n	8000f70 <HAL_RCC_OscConfig+0x94>
 8000f6a:	4ba1      	ldr	r3, [pc, #644]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	e015      	b.n	8000f9c <HAL_RCC_OscConfig+0xc0>
 8000f70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f74:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f78:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f7c:	fa93 f3a3 	rbit	r3, r3
 8000f80:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f88:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f8c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000f90:	fa93 f3a3 	rbit	r3, r3
 8000f94:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f98:	4b95      	ldr	r3, [pc, #596]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fa0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000fa4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000fa8:	fa92 f2a2 	rbit	r2, r2
 8000fac:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000fb0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fb4:	fab2 f282 	clz	r2, r2
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	f042 0220 	orr.w	r2, r2, #32
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	f002 021f 	and.w	r2, r2, #31
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	4013      	ands	r3, r2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 8111 	beq.w	80011f4 <HAL_RCC_OscConfig+0x318>
 8000fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f040 8108 	bne.w	80011f4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f000 bfc6 	b.w	8001f76 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ffa:	d106      	bne.n	800100a <HAL_RCC_OscConfig+0x12e>
 8000ffc:	4b7c      	ldr	r3, [pc, #496]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a7b      	ldr	r2, [pc, #492]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8001002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e036      	b.n	8001078 <HAL_RCC_OscConfig+0x19c>
 800100a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800100e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d10c      	bne.n	8001034 <HAL_RCC_OscConfig+0x158>
 800101a:	4b75      	ldr	r3, [pc, #468]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a74      	ldr	r2, [pc, #464]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8001020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	4b72      	ldr	r3, [pc, #456]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a71      	ldr	r2, [pc, #452]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 800102c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	e021      	b.n	8001078 <HAL_RCC_OscConfig+0x19c>
 8001034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001038:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x184>
 8001046:	4b6a      	ldr	r3, [pc, #424]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a69      	ldr	r2, [pc, #420]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	4b67      	ldr	r3, [pc, #412]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a66      	ldr	r2, [pc, #408]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8001058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	e00b      	b.n	8001078 <HAL_RCC_OscConfig+0x19c>
 8001060:	4b63      	ldr	r3, [pc, #396]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a62      	ldr	r2, [pc, #392]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8001066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	4b60      	ldr	r3, [pc, #384]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a5f      	ldr	r2, [pc, #380]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8001072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001076:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800107c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d059      	beq.n	800113c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001088:	f7ff fc66 	bl	8000958 <HAL_GetTick>
 800108c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001092:	f7ff fc61 	bl	8000958 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b64      	cmp	r3, #100	; 0x64
 80010a0:	d902      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	f000 bf67 	b.w	8001f76 <HAL_RCC_OscConfig+0x109a>
 80010a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ac:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80010bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c0:	fab3 f383 	clz	r3, r3
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d102      	bne.n	80010da <HAL_RCC_OscConfig+0x1fe>
 80010d4:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	e015      	b.n	8001106 <HAL_RCC_OscConfig+0x22a>
 80010da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010de:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80010e6:	fa93 f3a3 	rbit	r3, r3
 80010ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80010ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010f6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80010fa:	fa93 f3a3 	rbit	r3, r3
 80010fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800110a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800110e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001112:	fa92 f2a2 	rbit	r2, r2
 8001116:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800111a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800111e:	fab2 f282 	clz	r2, r2
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	f042 0220 	orr.w	r2, r2, #32
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	f002 021f 	and.w	r2, r2, #31
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	4013      	ands	r3, r2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0ab      	beq.n	8001092 <HAL_RCC_OscConfig+0x1b6>
 800113a:	e05c      	b.n	80011f6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fc0c 	bl	8000958 <HAL_GetTick>
 8001140:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001144:	e00a      	b.n	800115c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001146:	f7ff fc07 	bl	8000958 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d902      	bls.n	800115c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	f000 bf0d 	b.w	8001f76 <HAL_RCC_OscConfig+0x109a>
 800115c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001160:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001170:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001174:	fab3 f383 	clz	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	b2db      	uxtb	r3, r3
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b01      	cmp	r3, #1
 8001186:	d102      	bne.n	800118e <HAL_RCC_OscConfig+0x2b2>
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	e015      	b.n	80011ba <HAL_RCC_OscConfig+0x2de>
 800118e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001192:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80011a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_RCC_OscConfig+0x314>)
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011be:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80011c2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011c6:	fa92 f2a2 	rbit	r2, r2
 80011ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80011ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011d2:	fab2 f282 	clz	r2, r2
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	f042 0220 	orr.w	r2, r2, #32
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	f002 021f 	and.w	r2, r2, #31
 80011e2:	2101      	movs	r1, #1
 80011e4:	fa01 f202 	lsl.w	r2, r1, r2
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1ab      	bne.n	8001146 <HAL_RCC_OscConfig+0x26a>
 80011ee:	e002      	b.n	80011f6 <HAL_RCC_OscConfig+0x31a>
 80011f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 817f 	beq.w	800150a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800120c:	4ba7      	ldr	r3, [pc, #668]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00c      	beq.n	8001232 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001218:	4ba4      	ldr	r3, [pc, #656]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b08      	cmp	r3, #8
 8001222:	d173      	bne.n	800130c <HAL_RCC_OscConfig+0x430>
 8001224:	4ba1      	ldr	r3, [pc, #644]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800122c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001230:	d16c      	bne.n	800130c <HAL_RCC_OscConfig+0x430>
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001238:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001244:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001248:	fab3 f383 	clz	r3, r3
 800124c:	b2db      	uxtb	r3, r3
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d102      	bne.n	8001262 <HAL_RCC_OscConfig+0x386>
 800125c:	4b93      	ldr	r3, [pc, #588]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	e013      	b.n	800128a <HAL_RCC_OscConfig+0x3ae>
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001268:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800126c:	fa93 f3a3 	rbit	r3, r3
 8001270:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800127a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001286:	4b89      	ldr	r3, [pc, #548]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	2202      	movs	r2, #2
 800128c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001290:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001294:	fa92 f2a2 	rbit	r2, r2
 8001298:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800129c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	f042 0220 	orr.w	r2, r2, #32
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	f002 021f 	and.w	r2, r2, #31
 80012b0:	2101      	movs	r1, #1
 80012b2:	fa01 f202 	lsl.w	r2, r1, r2
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00a      	beq.n	80012d2 <HAL_RCC_OscConfig+0x3f6>
 80012bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d002      	beq.n	80012d2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f000 be52 	b.w	8001f76 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b76      	ldr	r3, [pc, #472]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	21f8      	movs	r1, #248	; 0xf8
 80012e8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ec:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80012f0:	fa91 f1a1 	rbit	r1, r1
 80012f4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80012f8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012fc:	fab1 f181 	clz	r1, r1
 8001300:	b2c9      	uxtb	r1, r1
 8001302:	408b      	lsls	r3, r1
 8001304:	4969      	ldr	r1, [pc, #420]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	e0fe      	b.n	800150a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001310:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 8088 	beq.w	800142e <HAL_RCC_OscConfig+0x552>
 800131e:	2301      	movs	r3, #1
 8001320:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001324:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001330:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001334:	fab3 f383 	clz	r3, r3
 8001338:	b2db      	uxtb	r3, r3
 800133a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800133e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	461a      	mov	r2, r3
 8001346:	2301      	movs	r3, #1
 8001348:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff fb05 	bl	8000958 <HAL_GetTick>
 800134e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001352:	e00a      	b.n	800136a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001354:	f7ff fb00 	bl	8000958 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d902      	bls.n	800136a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	f000 be06 	b.w	8001f76 <HAL_RCC_OscConfig+0x109a>
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800137c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	fab3 f383 	clz	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	b2db      	uxtb	r3, r3
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b01      	cmp	r3, #1
 8001392:	d102      	bne.n	800139a <HAL_RCC_OscConfig+0x4be>
 8001394:	4b45      	ldr	r3, [pc, #276]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	e013      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e6>
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80013a4:	fa93 f3a3 	rbit	r3, r3
 80013a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80013ac:	2302      	movs	r3, #2
 80013ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80013b6:	fa93 f3a3 	rbit	r3, r3
 80013ba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	2202      	movs	r2, #2
 80013c4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80013c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013cc:	fa92 f2a2 	rbit	r2, r2
 80013d0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80013d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013d8:	fab2 f282 	clz	r2, r2
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	f042 0220 	orr.w	r2, r2, #32
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	f002 021f 	and.w	r2, r2, #31
 80013e8:	2101      	movs	r1, #1
 80013ea:	fa01 f202 	lsl.w	r2, r1, r2
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0af      	beq.n	8001354 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001400:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	691b      	ldr	r3, [r3, #16]
 8001408:	21f8      	movs	r1, #248	; 0xf8
 800140a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001412:	fa91 f1a1 	rbit	r1, r1
 8001416:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800141a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800141e:	fab1 f181 	clz	r1, r1
 8001422:	b2c9      	uxtb	r1, r1
 8001424:	408b      	lsls	r3, r1
 8001426:	4921      	ldr	r1, [pc, #132]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
 800142c:	e06d      	b.n	800150a <HAL_RCC_OscConfig+0x62e>
 800142e:	2301      	movs	r3, #1
 8001430:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001440:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001444:	fab3 f383 	clz	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800144e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	461a      	mov	r2, r3
 8001456:	2300      	movs	r3, #0
 8001458:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145a:	f7ff fa7d 	bl	8000958 <HAL_GetTick>
 800145e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e00a      	b.n	800147a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fa78 	bl	8000958 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d902      	bls.n	800147a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	f000 bd7e 	b.w	8001f76 <HAL_RCC_OscConfig+0x109a>
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800148c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001490:	fab3 f383 	clz	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d105      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5d4>
 80014a4:	4b01      	ldr	r3, [pc, #4]	; (80014ac <HAL_RCC_OscConfig+0x5d0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	e016      	b.n	80014d8 <HAL_RCC_OscConfig+0x5fc>
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014d4:	4bbf      	ldr	r3, [pc, #764]	; (80017d4 <HAL_RCC_OscConfig+0x8f8>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	2202      	movs	r2, #2
 80014da:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80014de:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80014e2:	fa92 f2a2 	rbit	r2, r2
 80014e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80014ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	f042 0220 	orr.w	r2, r2, #32
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	f002 021f 	and.w	r2, r2, #31
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f202 	lsl.w	r2, r1, r2
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1ac      	bne.n	8001464 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800150e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 8113 	beq.w	8001746 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001524:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d07c      	beq.n	800162a <HAL_RCC_OscConfig+0x74e>
 8001530:	2301      	movs	r3, #1
 8001532:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800153a:	fa93 f3a3 	rbit	r3, r3
 800153e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001542:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461a      	mov	r2, r3
 800154e:	4ba2      	ldr	r3, [pc, #648]	; (80017d8 <HAL_RCC_OscConfig+0x8fc>)
 8001550:	4413      	add	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	461a      	mov	r2, r3
 8001556:	2301      	movs	r3, #1
 8001558:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff f9fd 	bl	8000958 <HAL_GetTick>
 800155e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001562:	e00a      	b.n	800157a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff f9f8 	bl	8000958 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d902      	bls.n	800157a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	f000 bcfe 	b.w	8001f76 <HAL_RCC_OscConfig+0x109a>
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001584:	fa93 f2a3 	rbit	r2, r3
 8001588:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800158c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800159a:	2202      	movs	r2, #2
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	fa93 f2a3 	rbit	r2, r3
 80015ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015be:	2202      	movs	r2, #2
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	fa93 f2a3 	rbit	r2, r3
 80015d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015da:	4b7e      	ldr	r3, [pc, #504]	; (80017d4 <HAL_RCC_OscConfig+0x8f8>)
 80015dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015e6:	2102      	movs	r1, #2
 80015e8:	6019      	str	r1, [r3, #0]
 80015ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	fa93 f1a3 	rbit	r1, r3
 80015f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001600:	6019      	str	r1, [r3, #0]
  return result;
 8001602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001606:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	fab3 f383 	clz	r3, r3
 8001610:	b2db      	uxtb	r3, r3
 8001612:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 031f 	and.w	r3, r3, #31
 800161c:	2101      	movs	r1, #1
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d09d      	beq.n	8001564 <HAL_RCC_OscConfig+0x688>
 8001628:	e08d      	b.n	8001746 <HAL_RCC_OscConfig+0x86a>
 800162a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800162e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800163a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	fa93 f2a3 	rbit	r2, r3
 8001644:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001648:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800164c:	601a      	str	r2, [r3, #0]
  return result;
 800164e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001652:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001656:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001658:	fab3 f383 	clz	r3, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	4b5d      	ldr	r3, [pc, #372]	; (80017d8 <HAL_RCC_OscConfig+0x8fc>)
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	461a      	mov	r2, r3
 8001668:	2300      	movs	r3, #0
 800166a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff f974 	bl	8000958 <HAL_GetTick>
 8001670:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	e00a      	b.n	800168c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001676:	f7ff f96f 	bl	8000958 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d902      	bls.n	800168c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	f000 bc75 	b.w	8001f76 <HAL_RCC_OscConfig+0x109a>
 800168c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001690:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001694:	2202      	movs	r2, #2
 8001696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	fa93 f2a3 	rbit	r2, r3
 80016a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016b8:	2202      	movs	r2, #2
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	fa93 f2a3 	rbit	r2, r3
 80016ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016dc:	2202      	movs	r2, #2
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <HAL_RCC_OscConfig+0x8f8>)
 80016fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001700:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001704:	2102      	movs	r1, #2
 8001706:	6019      	str	r1, [r3, #0]
 8001708:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800170c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	fa93 f1a3 	rbit	r1, r3
 8001716:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800171e:	6019      	str	r1, [r3, #0]
  return result;
 8001720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001724:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d197      	bne.n	8001676 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 81a5 	beq.w	8001aa6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001762:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_RCC_OscConfig+0x8f8>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d116      	bne.n	800179c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <HAL_RCC_OscConfig+0x8f8>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <HAL_RCC_OscConfig+0x8f8>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_RCC_OscConfig+0x8f8>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001786:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001790:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001794:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <HAL_RCC_OscConfig+0x900>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d121      	bne.n	80017ec <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_RCC_OscConfig+0x900>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_RCC_OscConfig+0x900>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b4:	f7ff f8d0 	bl	8000958 <HAL_GetTick>
 80017b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	e010      	b.n	80017e0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7ff f8cb 	bl	8000958 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d908      	bls.n	80017e0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e3d1      	b.n	8001f76 <HAL_RCC_OscConfig+0x109a>
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	10908120 	.word	0x10908120
 80017dc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b8d      	ldr	r3, [pc, #564]	; (8001a18 <HAL_RCC_OscConfig+0xb3c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0e8      	beq.n	80017be <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x92e>
 80017fc:	4b87      	ldr	r3, [pc, #540]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4a86      	ldr	r2, [pc, #536]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6213      	str	r3, [r2, #32]
 8001808:	e035      	b.n	8001876 <HAL_RCC_OscConfig+0x99a>
 800180a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <HAL_RCC_OscConfig+0x958>
 800181a:	4b80      	ldr	r3, [pc, #512]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	4a7f      	ldr	r2, [pc, #508]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	6213      	str	r3, [r2, #32]
 8001826:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	4a7c      	ldr	r2, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	6213      	str	r3, [r2, #32]
 8001832:	e020      	b.n	8001876 <HAL_RCC_OscConfig+0x99a>
 8001834:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001838:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b05      	cmp	r3, #5
 8001842:	d10c      	bne.n	800185e <HAL_RCC_OscConfig+0x982>
 8001844:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a74      	ldr	r2, [pc, #464]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 800184a:	f043 0304 	orr.w	r3, r3, #4
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	4b72      	ldr	r3, [pc, #456]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4a71      	ldr	r2, [pc, #452]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6213      	str	r3, [r2, #32]
 800185c:	e00b      	b.n	8001876 <HAL_RCC_OscConfig+0x99a>
 800185e:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 8001864:	f023 0301 	bic.w	r3, r3, #1
 8001868:	6213      	str	r3, [r2, #32]
 800186a:	4b6c      	ldr	r3, [pc, #432]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	4a6b      	ldr	r2, [pc, #428]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 8001870:	f023 0304 	bic.w	r3, r3, #4
 8001874:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800187a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8081 	beq.w	800198a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001888:	f7ff f866 	bl	8000958 <HAL_GetTick>
 800188c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	e00b      	b.n	80018aa <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7ff f861 	bl	8000958 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e365      	b.n	8001f76 <HAL_RCC_OscConfig+0x109a>
 80018aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018b2:	2202      	movs	r2, #2
 80018b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ba:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018d6:	2202      	movs	r2, #2
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	fa93 f2a3 	rbit	r2, r3
 80018e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018f0:	601a      	str	r2, [r3, #0]
  return result;
 80018f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fc:	fab3 f383 	clz	r3, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d102      	bne.n	8001916 <HAL_RCC_OscConfig+0xa3a>
 8001910:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	e013      	b.n	800193e <HAL_RCC_OscConfig+0xa62>
 8001916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800191e:	2202      	movs	r2, #2
 8001920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001926:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fa93 f2a3 	rbit	r2, r3
 8001930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001934:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001942:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001946:	2102      	movs	r1, #2
 8001948:	6011      	str	r1, [r2, #0]
 800194a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800194e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	fa92 f1a2 	rbit	r1, r2
 8001958:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800195c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001960:	6011      	str	r1, [r2, #0]
  return result;
 8001962:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001966:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	fab2 f282 	clz	r2, r2
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	f002 021f 	and.w	r2, r2, #31
 800197c:	2101      	movs	r1, #1
 800197e:	fa01 f202 	lsl.w	r2, r1, r2
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d084      	beq.n	8001892 <HAL_RCC_OscConfig+0x9b6>
 8001988:	e083      	b.n	8001a92 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198a:	f7fe ffe5 	bl	8000958 <HAL_GetTick>
 800198e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7fe ffe0 	bl	8000958 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e2e4      	b.n	8001f76 <HAL_RCC_OscConfig+0x109a>
 80019ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019b4:	2202      	movs	r2, #2
 80019b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019bc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fa93 f2a3 	rbit	r2, r3
 80019c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019d8:	2202      	movs	r2, #2
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019e0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fa93 f2a3 	rbit	r2, r3
 80019ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019f2:	601a      	str	r2, [r3, #0]
  return result;
 80019f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019f8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d106      	bne.n	8001a20 <HAL_RCC_OscConfig+0xb44>
 8001a12:	4b02      	ldr	r3, [pc, #8]	; (8001a1c <HAL_RCC_OscConfig+0xb40>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	e017      	b.n	8001a48 <HAL_RCC_OscConfig+0xb6c>
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a24:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a28:	2202      	movs	r2, #2
 8001a2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a30:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	fa93 f2a3 	rbit	r2, r3
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	4bb3      	ldr	r3, [pc, #716]	; (8001d14 <HAL_RCC_OscConfig+0xe38>)
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a4c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a50:	2102      	movs	r1, #2
 8001a52:	6011      	str	r1, [r2, #0]
 8001a54:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a58:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	fa92 f1a2 	rbit	r1, r2
 8001a62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a66:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a6a:	6011      	str	r1, [r2, #0]
  return result;
 8001a6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a70:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	fab2 f282 	clz	r2, r2
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f002 021f 	and.w	r2, r2, #31
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d180      	bne.n	8001994 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a92:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d105      	bne.n	8001aa6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9a:	4b9e      	ldr	r3, [pc, #632]	; (8001d14 <HAL_RCC_OscConfig+0xe38>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a9d      	ldr	r2, [pc, #628]	; (8001d14 <HAL_RCC_OscConfig+0xe38>)
 8001aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aaa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 825e 	beq.w	8001f74 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab8:	4b96      	ldr	r3, [pc, #600]	; (8001d14 <HAL_RCC_OscConfig+0xe38>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	f000 821f 	beq.w	8001f04 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	f040 8170 	bne.w	8001db8 <HAL_RCC_OscConfig+0xedc>
 8001ad8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001adc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	fa93 f2a3 	rbit	r2, r3
 8001af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001afc:	601a      	str	r2, [r3, #0]
  return result;
 8001afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b02:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b06:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b08:	fab3 f383 	clz	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7fe ff1b 	bl	8000958 <HAL_GetTick>
 8001b22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b26:	e009      	b.n	8001b3c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b28:	f7fe ff16 	bl	8000958 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e21c      	b.n	8001f76 <HAL_RCC_OscConfig+0x109a>
 8001b3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b40:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b60:	601a      	str	r2, [r3, #0]
  return result;
 8001b62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b66:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0xcaa>
 8001b80:	4b64      	ldr	r3, [pc, #400]	; (8001d14 <HAL_RCC_OscConfig+0xe38>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	e027      	b.n	8001bd6 <HAL_RCC_OscConfig+0xcfa>
 8001b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b98:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fa93 f2a3 	rbit	r2, r3
 8001ba2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bbe:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bcc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <HAL_RCC_OscConfig+0xe38>)
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bda:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bde:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be2:	6011      	str	r1, [r2, #0]
 8001be4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001be8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	fa92 f1a2 	rbit	r1, r2
 8001bf2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001bf6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001bfa:	6011      	str	r1, [r2, #0]
  return result;
 8001bfc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c00:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	fab2 f282 	clz	r2, r2
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	f042 0220 	orr.w	r2, r2, #32
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f002 021f 	and.w	r2, r2, #31
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d182      	bne.n	8001b28 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c22:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <HAL_RCC_OscConfig+0xe38>)
 8001c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c26:	f023 020f 	bic.w	r2, r3, #15
 8001c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	4937      	ldr	r1, [pc, #220]	; (8001d14 <HAL_RCC_OscConfig+0xe38>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001c3c:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <HAL_RCC_OscConfig+0xe38>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6a19      	ldr	r1, [r3, #32]
 8001c50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	492d      	ldr	r1, [pc, #180]	; (8001d14 <HAL_RCC_OscConfig+0xe38>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
 8001c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c68:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	fa93 f2a3 	rbit	r2, r3
 8001c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c84:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c88:	601a      	str	r2, [r3, #0]
  return result;
 8001c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c92:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7fe fe55 	bl	8000958 <HAL_GetTick>
 8001cae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb2:	e009      	b.n	8001cc8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7fe fe50 	bl	8000958 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e156      	b.n	8001f76 <HAL_RCC_OscConfig+0x109a>
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cda:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cec:	601a      	str	r2, [r3, #0]
  return result;
 8001cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cf6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d105      	bne.n	8001d18 <HAL_RCC_OscConfig+0xe3c>
 8001d0c:	4b01      	ldr	r3, [pc, #4]	; (8001d14 <HAL_RCC_OscConfig+0xe38>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	e02a      	b.n	8001d68 <HAL_RCC_OscConfig+0xe8c>
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000
 8001d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d38:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d42:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d50:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	fa93 f2a3 	rbit	r2, r3
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	4b86      	ldr	r3, [pc, #536]	; (8001f80 <HAL_RCC_OscConfig+0x10a4>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d6c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d74:	6011      	str	r1, [r2, #0]
 8001d76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d7a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	fa92 f1a2 	rbit	r1, r2
 8001d84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d88:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001d8c:	6011      	str	r1, [r2, #0]
  return result;
 8001d8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d92:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	fab2 f282 	clz	r2, r2
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f042 0220 	orr.w	r2, r2, #32
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f002 021f 	and.w	r2, r2, #31
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f43f af7f 	beq.w	8001cb4 <HAL_RCC_OscConfig+0xdd8>
 8001db6:	e0dd      	b.n	8001f74 <HAL_RCC_OscConfig+0x1098>
 8001db8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fa93 f2a3 	rbit	r2, r3
 8001dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ddc:	601a      	str	r2, [r3, #0]
  return result;
 8001dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001de6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001df2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfe:	f7fe fdab 	bl	8000958 <HAL_GetTick>
 8001e02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e06:	e009      	b.n	8001e1c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e08:	f7fe fda6 	bl	8000958 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0ac      	b.n	8001f76 <HAL_RCC_OscConfig+0x109a>
 8001e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e20:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e40:	601a      	str	r2, [r3, #0]
  return result;
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_OscConfig+0xf8a>
 8001e60:	4b47      	ldr	r3, [pc, #284]	; (8001f80 <HAL_RCC_OscConfig+0x10a4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	e027      	b.n	8001eb6 <HAL_RCC_OscConfig+0xfda>
 8001e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e78:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	fa93 f2a3 	rbit	r2, r3
 8001e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e90:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	fa93 f2a3 	rbit	r2, r3
 8001ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eac:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	4b33      	ldr	r3, [pc, #204]	; (8001f80 <HAL_RCC_OscConfig+0x10a4>)
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ebe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ec2:	6011      	str	r1, [r2, #0]
 8001ec4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ec8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ecc:	6812      	ldr	r2, [r2, #0]
 8001ece:	fa92 f1a2 	rbit	r1, r2
 8001ed2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ed6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001eda:	6011      	str	r1, [r2, #0]
  return result;
 8001edc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ee0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	fab2 f282 	clz	r2, r2
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	f042 0220 	orr.w	r2, r2, #32
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f002 021f 	and.w	r2, r2, #31
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d182      	bne.n	8001e08 <HAL_RCC_OscConfig+0xf2c>
 8001f02:	e037      	b.n	8001f74 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e02e      	b.n	8001f76 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_RCC_OscConfig+0x10a4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001f20:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_RCC_OscConfig+0x10a4>)
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f28:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f2c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d117      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f40:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f44:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d10b      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5c:	f003 020f 	and.w	r2, r3, #15
 8001f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d001      	beq.n	8001f74 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b09e      	sub	sp, #120	; 0x78
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e162      	b.n	8002262 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b90      	ldr	r3, [pc, #576]	; (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d910      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b8d      	ldr	r3, [pc, #564]	; (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	498b      	ldr	r1, [pc, #556]	; (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e14a      	b.n	8002262 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b82      	ldr	r3, [pc, #520]	; (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	497f      	ldr	r1, [pc, #508]	; (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 80dc 	beq.w	80021b0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d13c      	bne.n	800207a <HAL_RCC_ClockConfig+0xf6>
 8002000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002004:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800200e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d102      	bne.n	800202a <HAL_RCC_ClockConfig+0xa6>
 8002024:	4b6f      	ldr	r3, [pc, #444]	; (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	e00f      	b.n	800204a <HAL_RCC_ClockConfig+0xc6>
 800202a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800202e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	667b      	str	r3, [r7, #100]	; 0x64
 8002038:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800203c:	663b      	str	r3, [r7, #96]	; 0x60
 800203e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002046:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800204e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002050:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002052:	fa92 f2a2 	rbit	r2, r2
 8002056:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800205a:	fab2 f282 	clz	r2, r2
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	f042 0220 	orr.w	r2, r2, #32
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	f002 021f 	and.w	r2, r2, #31
 800206a:	2101      	movs	r1, #1
 800206c:	fa01 f202 	lsl.w	r2, r1, r2
 8002070:	4013      	ands	r3, r2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d17b      	bne.n	800216e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0f3      	b.n	8002262 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d13c      	bne.n	80020fc <HAL_RCC_ClockConfig+0x178>
 8002082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002086:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_ClockConfig+0x128>
 80020a6:	4b4f      	ldr	r3, [pc, #316]	; (80021e4 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	e00f      	b.n	80020cc <HAL_RCC_ClockConfig+0x148>
 80020ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	647b      	str	r3, [r7, #68]	; 0x44
 80020ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020be:	643b      	str	r3, [r7, #64]	; 0x40
 80020c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c8:	4b46      	ldr	r3, [pc, #280]	; (80021e4 <HAL_RCC_ClockConfig+0x260>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d0:	63ba      	str	r2, [r7, #56]	; 0x38
 80020d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020d4:	fa92 f2a2 	rbit	r2, r2
 80020d8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020dc:	fab2 f282 	clz	r2, r2
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f042 0220 	orr.w	r2, r2, #32
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	f002 021f 	and.w	r2, r2, #31
 80020ec:	2101      	movs	r1, #1
 80020ee:	fa01 f202 	lsl.w	r2, r1, r2
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d13a      	bne.n	800216e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b2      	b.n	8002262 <HAL_RCC_ClockConfig+0x2de>
 80020fc:	2302      	movs	r3, #2
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	b2db      	uxtb	r3, r3
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d102      	bne.n	8002124 <HAL_RCC_ClockConfig+0x1a0>
 800211e:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	e00d      	b.n	8002140 <HAL_RCC_ClockConfig+0x1bc>
 8002124:	2302      	movs	r3, #2
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	fa93 f3a3 	rbit	r3, r3
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
 8002130:	2302      	movs	r3, #2
 8002132:	623b      	str	r3, [r7, #32]
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <HAL_RCC_ClockConfig+0x260>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	2202      	movs	r2, #2
 8002142:	61ba      	str	r2, [r7, #24]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	fa92 f2a2 	rbit	r2, r2
 800214a:	617a      	str	r2, [r7, #20]
  return result;
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	fab2 f282 	clz	r2, r2
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	f042 0220 	orr.w	r2, r2, #32
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	f002 021f 	and.w	r2, r2, #31
 800215e:	2101      	movs	r1, #1
 8002160:	fa01 f202 	lsl.w	r2, r1, r2
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e079      	b.n	8002262 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_RCC_ClockConfig+0x260>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 0203 	bic.w	r2, r3, #3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	491a      	ldr	r1, [pc, #104]	; (80021e4 <HAL_RCC_ClockConfig+0x260>)
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002180:	f7fe fbea 	bl	8000958 <HAL_GetTick>
 8002184:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002186:	e00a      	b.n	800219e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002188:	f7fe fbe6 	bl	8000958 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e061      	b.n	8002262 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_RCC_ClockConfig+0x260>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 020c 	and.w	r2, r3, #12
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1eb      	bne.n	8002188 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d214      	bcs.n	80021e8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 0207 	bic.w	r2, r3, #7
 80021c6:	4906      	ldr	r1, [pc, #24]	; (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <HAL_RCC_ClockConfig+0x25c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e040      	b.n	8002262 <HAL_RCC_ClockConfig+0x2de>
 80021e0:	40022000 	.word	0x40022000
 80021e4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCC_ClockConfig+0x2e8>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	491a      	ldr	r1, [pc, #104]	; (800226c <HAL_RCC_ClockConfig+0x2e8>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_RCC_ClockConfig+0x2e8>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	4912      	ldr	r1, [pc, #72]	; (800226c <HAL_RCC_ClockConfig+0x2e8>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002226:	f000 f829 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800222a:	4601      	mov	r1, r0
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_RCC_ClockConfig+0x2e8>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002234:	22f0      	movs	r2, #240	; 0xf0
 8002236:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	fa92 f2a2 	rbit	r2, r2
 800223e:	60fa      	str	r2, [r7, #12]
  return result;
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	fab2 f282 	clz	r2, r2
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	40d3      	lsrs	r3, r2
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x2ec>)
 800224c:	5cd3      	ldrb	r3, [r2, r3]
 800224e:	fa21 f303 	lsr.w	r3, r1, r3
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <HAL_RCC_ClockConfig+0x2f0>)
 8002254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_RCC_ClockConfig+0x2f4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fa86 	bl	800076c <HAL_InitTick>
  
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3778      	adds	r7, #120	; 0x78
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	08006418 	.word	0x08006418
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b08b      	sub	sp, #44	; 0x2c
 8002280:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002296:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d002      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x30>
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d003      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x36>
 80022aa:	e03f      	b.n	800232c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022ac:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022ae:	623b      	str	r3, [r7, #32]
      break;
 80022b0:	e03f      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022b8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022bc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	fa92 f2a2 	rbit	r2, r2
 80022c4:	607a      	str	r2, [r7, #4]
  return result;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	fab2 f282 	clz	r2, r2
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	40d3      	lsrs	r3, r2
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	220f      	movs	r2, #15
 80022e0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	fa92 f2a2 	rbit	r2, r2
 80022e8:	60fa      	str	r2, [r7, #12]
  return result;
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	fab2 f282 	clz	r2, r2
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	40d3      	lsrs	r3, r2
 80022f4:	4a15      	ldr	r2, [pc, #84]	; (800234c <HAL_RCC_GetSysClockFreq+0xd0>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002304:	4a0f      	ldr	r2, [pc, #60]	; (8002344 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	fbb2 f2f3 	udiv	r2, r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
 8002314:	e007      	b.n	8002326 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002316:	4a0b      	ldr	r2, [pc, #44]	; (8002344 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	fbb2 f2f3 	udiv	r2, r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	623b      	str	r3, [r7, #32]
      break;
 800232a:	e002      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetSysClockFreq+0xc8>)
 800232e:	623b      	str	r3, [r7, #32]
      break;
 8002330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002332:	6a3b      	ldr	r3, [r7, #32]
}
 8002334:	4618      	mov	r0, r3
 8002336:	372c      	adds	r7, #44	; 0x2c
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40021000 	.word	0x40021000
 8002344:	007a1200 	.word	0x007a1200
 8002348:	08006430 	.word	0x08006430
 800234c:	08006440 	.word	0x08006440

08002350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_RCC_GetHCLKFreq+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000000 	.word	0x20000000

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800236e:	f7ff ffef 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002372:	4601      	mov	r1, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800237c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002380:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	fa92 f2a2 	rbit	r2, r2
 8002388:	603a      	str	r2, [r7, #0]
  return result;
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	fab2 f282 	clz	r2, r2
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	40d3      	lsrs	r3, r2
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08006428 	.word	0x08006428

080023ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023b2:	f7ff ffcd 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 80023b6:	4601      	mov	r1, r0
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023c0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	fa92 f2a2 	rbit	r2, r2
 80023cc:	603a      	str	r2, [r7, #0]
  return result;
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	fab2 f282 	clz	r2, r2
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	40d3      	lsrs	r3, r2
 80023d8:	4a04      	ldr	r2, [pc, #16]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x40>)
 80023da:	5cd3      	ldrb	r3, [r2, r3]
 80023dc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08006428 	.word	0x08006428

080023f0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	220f      	movs	r2, #15
 80023fe:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_RCC_GetClockConfig+0x5c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0203 	and.w	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_RCC_GetClockConfig+0x5c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_RCC_GetClockConfig+0x5c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_GetClockConfig+0x5c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	08db      	lsrs	r3, r3, #3
 800242a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002432:	4b07      	ldr	r3, [pc, #28]	; (8002450 <HAL_RCC_GetClockConfig+0x60>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0207 	and.w	r2, r3, #7
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	601a      	str	r2, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	40022000 	.word	0x40022000

08002454 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b092      	sub	sp, #72	; 0x48
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80d4 	beq.w	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002478:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10e      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4b4b      	ldr	r3, [pc, #300]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	4a4a      	ldr	r2, [pc, #296]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248e:	61d3      	str	r3, [r2, #28]
 8002490:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249c:	2301      	movs	r3, #1
 800249e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a2:	4b45      	ldr	r3, [pc, #276]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d118      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ae:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a41      	ldr	r2, [pc, #260]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ba:	f7fe fa4d 	bl	8000958 <HAL_GetTick>
 80024be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	e008      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7fe fa49 	bl	8000958 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	; 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e1d6      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024e0:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8084 	beq.w	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d07c      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002500:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002508:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	461a      	mov	r2, r3
 800252a:	2301      	movs	r3, #1
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800253c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	461a      	mov	r2, r3
 800254e:	2300      	movs	r3, #0
 8002550:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002552:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002556:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d04b      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7fe f9f9 	bl	8000958 <HAL_GetTick>
 8002566:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	e00a      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7fe f9f5 	bl	8000958 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	; 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e180      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002580:	2302      	movs	r3, #2
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	fa93 f3a3 	rbit	r3, r3
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
 800258c:	2302      	movs	r3, #2
 800258e:	623b      	str	r3, [r7, #32]
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	61fb      	str	r3, [r7, #28]
  return result;
 8002598:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d108      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80025ae:	4b01      	ldr	r3, [pc, #4]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	e00d      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	10908100 	.word	0x10908100
 80025c0:	2302      	movs	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	4b9a      	ldr	r3, [pc, #616]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	2202      	movs	r2, #2
 80025d2:	613a      	str	r2, [r7, #16]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	fa92 f2a2 	rbit	r2, r2
 80025da:	60fa      	str	r2, [r7, #12]
  return result;
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	fab2 f282 	clz	r2, r2
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f002 021f 	and.w	r2, r2, #31
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f202 	lsl.w	r2, r1, r2
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0b7      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025fa:	4b8f      	ldr	r3, [pc, #572]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	498c      	ldr	r1, [pc, #560]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800260c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002610:	2b01      	cmp	r3, #1
 8002612:	d105      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002614:	4b88      	ldr	r3, [pc, #544]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4a87      	ldr	r2, [pc, #540]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800261a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800262c:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f023 0203 	bic.w	r2, r3, #3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	497f      	ldr	r1, [pc, #508]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800264a:	4b7b      	ldr	r3, [pc, #492]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4978      	ldr	r1, [pc, #480]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002668:	4b73      	ldr	r3, [pc, #460]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	4970      	ldr	r1, [pc, #448]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002686:	4b6c      	ldr	r3, [pc, #432]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f023 0210 	bic.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	4969      	ldr	r1, [pc, #420]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002694:	4313      	orrs	r3, r2
 8002696:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80026a4:	4b64      	ldr	r3, [pc, #400]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	4961      	ldr	r1, [pc, #388]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026c2:	4b5d      	ldr	r3, [pc, #372]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f023 0220 	bic.w	r2, r3, #32
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	495a      	ldr	r1, [pc, #360]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026e0:	4b55      	ldr	r3, [pc, #340]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	4952      	ldr	r1, [pc, #328]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026fe:	4b4e      	ldr	r3, [pc, #312]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	494b      	ldr	r1, [pc, #300]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800271c:	4b46      	ldr	r3, [pc, #280]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	4943      	ldr	r1, [pc, #268]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800273a:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	493c      	ldr	r1, [pc, #240]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002758:	4b37      	ldr	r3, [pc, #220]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	4934      	ldr	r1, [pc, #208]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002766:	4313      	orrs	r3, r2
 8002768:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002776:	4b30      	ldr	r3, [pc, #192]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	492d      	ldr	r1, [pc, #180]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d008      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002798:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a0:	4925      	ldr	r1, [pc, #148]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	491e      	ldr	r1, [pc, #120]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	4916      	ldr	r1, [pc, #88]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	490f      	ldr	r1, [pc, #60]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	4907      	ldr	r1, [pc, #28]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281a:	4313      	orrs	r3, r2
 800281c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00c      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800282a:	4b03      	ldr	r3, [pc, #12]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	e002      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283e:	4913      	ldr	r1, [pc, #76]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002840:	4313      	orrs	r3, r2
 8002842:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	490b      	ldr	r1, [pc, #44]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800285e:	4313      	orrs	r3, r2
 8002860:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287a:	4904      	ldr	r1, [pc, #16]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800287c:	4313      	orrs	r3, r2
 800287e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3748      	adds	r7, #72	; 0x48
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e049      	b.n	8002936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f841 	bl	800293e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 f9f8 	bl	8002cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d001      	beq.n	800296c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e04f      	b.n	8002a0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <HAL_TIM_Base_Start_IT+0xc4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01d      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002996:	d018      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1f      	ldr	r2, [pc, #124]	; (8002a1c <HAL_TIM_Base_Start_IT+0xc8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1e      	ldr	r2, [pc, #120]	; (8002a20 <HAL_TIM_Base_Start_IT+0xcc>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_TIM_Base_Start_IT+0xd0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_TIM_Base_Start_IT+0xd4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x76>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d115      	bne.n	80029f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d015      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e2:	d011      	beq.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	e008      	b.n	8002a08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e000      	b.n	8002a0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40013400 	.word	0x40013400
 8002a28:	40014000 	.word	0x40014000
 8002a2c:	40015000 	.word	0x40015000
 8002a30:	00010007 	.word	0x00010007

08002a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d122      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d11b      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0202 	mvn.w	r2, #2
 8002a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f905 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002a7c:	e005      	b.n	8002a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f8f7 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f908 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d122      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f06f 0204 	mvn.w	r2, #4
 8002ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2202      	movs	r2, #2
 8002aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8db 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e005      	b.n	8002ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f8cd 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8de 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d122      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d11b      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0208 	mvn.w	r2, #8
 8002b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2204      	movs	r2, #4
 8002b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8b1 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002b24:	e005      	b.n	8002b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f8a3 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f8b4 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d122      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d11b      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0210 	mvn.w	r2, #16
 8002b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2208      	movs	r2, #8
 8002b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f887 	bl	8002c86 <HAL_TIM_IC_CaptureCallback>
 8002b78:	e005      	b.n	8002b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f879 	bl	8002c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f88a 	bl	8002c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0201 	mvn.w	r2, #1
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fd fd58 	bl	8000668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b80      	cmp	r3, #128	; 0x80
 8002bc4:	d10e      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd0:	2b80      	cmp	r3, #128	; 0x80
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f918 	bl	8002e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf2:	d10e      	bne.n	8002c12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b80      	cmp	r3, #128	; 0x80
 8002c00:	d107      	bne.n	8002c12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f90b 	bl	8002e28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d10e      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d107      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f838 	bl	8002cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b20      	cmp	r3, #32
 8002c4a:	d10e      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d107      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f06f 0220 	mvn.w	r2, #32
 8002c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f8cb 	bl	8002e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a42      	ldr	r2, [pc, #264]	; (8002de0 <TIM_Base_SetConfig+0x11c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce2:	d00f      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a3f      	ldr	r2, [pc, #252]	; (8002de4 <TIM_Base_SetConfig+0x120>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a3e      	ldr	r2, [pc, #248]	; (8002de8 <TIM_Base_SetConfig+0x124>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d007      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3d      	ldr	r2, [pc, #244]	; (8002dec <TIM_Base_SetConfig+0x128>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <TIM_Base_SetConfig+0x40>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a3c      	ldr	r2, [pc, #240]	; (8002df0 <TIM_Base_SetConfig+0x12c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d108      	bne.n	8002d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a31      	ldr	r2, [pc, #196]	; (8002de0 <TIM_Base_SetConfig+0x11c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01f      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d24:	d01b      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2e      	ldr	r2, [pc, #184]	; (8002de4 <TIM_Base_SetConfig+0x120>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d017      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2d      	ldr	r2, [pc, #180]	; (8002de8 <TIM_Base_SetConfig+0x124>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <TIM_Base_SetConfig+0x128>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00f      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a2c      	ldr	r2, [pc, #176]	; (8002df4 <TIM_Base_SetConfig+0x130>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00b      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a2b      	ldr	r2, [pc, #172]	; (8002df8 <TIM_Base_SetConfig+0x134>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <TIM_Base_SetConfig+0x138>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d003      	beq.n	8002d5e <TIM_Base_SetConfig+0x9a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a25      	ldr	r2, [pc, #148]	; (8002df0 <TIM_Base_SetConfig+0x12c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d108      	bne.n	8002d70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <TIM_Base_SetConfig+0x11c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d013      	beq.n	8002dc4 <TIM_Base_SetConfig+0x100>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a13      	ldr	r2, [pc, #76]	; (8002dec <TIM_Base_SetConfig+0x128>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00f      	beq.n	8002dc4 <TIM_Base_SetConfig+0x100>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a13      	ldr	r2, [pc, #76]	; (8002df4 <TIM_Base_SetConfig+0x130>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00b      	beq.n	8002dc4 <TIM_Base_SetConfig+0x100>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <TIM_Base_SetConfig+0x134>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d007      	beq.n	8002dc4 <TIM_Base_SetConfig+0x100>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a11      	ldr	r2, [pc, #68]	; (8002dfc <TIM_Base_SetConfig+0x138>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d003      	beq.n	8002dc4 <TIM_Base_SetConfig+0x100>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <TIM_Base_SetConfig+0x12c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40012c00 	.word	0x40012c00
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40013400 	.word	0x40013400
 8002df0:	40015000 	.word	0x40015000
 8002df4:	40014000 	.word	0x40014000
 8002df8:	40014400 	.word	0x40014400
 8002dfc:	40014800 	.word	0x40014800

08002e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e040      	b.n	8002ed0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fd fc42 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2224      	movs	r2, #36	; 0x24
 8002e68:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f82c 	bl	8002ed8 <UART_SetConfig>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e022      	b.n	8002ed0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f9f4 	bl	8003280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fa7b 	bl	80033c4 <UART_CheckIdleState>
 8002ece:	4603      	mov	r3, r0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b92      	ldr	r3, [pc, #584]	; (800314c <UART_SetConfig+0x274>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	6979      	ldr	r1, [r7, #20]
 8002f0c:	430b      	orrs	r3, r1
 8002f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a80      	ldr	r2, [pc, #512]	; (8003150 <UART_SetConfig+0x278>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d120      	bne.n	8002f96 <UART_SetConfig+0xbe>
 8002f54:	4b7f      	ldr	r3, [pc, #508]	; (8003154 <UART_SetConfig+0x27c>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d817      	bhi.n	8002f90 <UART_SetConfig+0xb8>
 8002f60:	a201      	add	r2, pc, #4	; (adr r2, 8002f68 <UART_SetConfig+0x90>)
 8002f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f66:	bf00      	nop
 8002f68:	08002f79 	.word	0x08002f79
 8002f6c:	08002f85 	.word	0x08002f85
 8002f70:	08002f8b 	.word	0x08002f8b
 8002f74:	08002f7f 	.word	0x08002f7f
 8002f78:	2301      	movs	r3, #1
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e0b5      	b.n	80030ea <UART_SetConfig+0x212>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	77fb      	strb	r3, [r7, #31]
 8002f82:	e0b2      	b.n	80030ea <UART_SetConfig+0x212>
 8002f84:	2304      	movs	r3, #4
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e0af      	b.n	80030ea <UART_SetConfig+0x212>
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e0ac      	b.n	80030ea <UART_SetConfig+0x212>
 8002f90:	2310      	movs	r3, #16
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e0a9      	b.n	80030ea <UART_SetConfig+0x212>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a6f      	ldr	r2, [pc, #444]	; (8003158 <UART_SetConfig+0x280>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d124      	bne.n	8002fea <UART_SetConfig+0x112>
 8002fa0:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <UART_SetConfig+0x27c>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fac:	d011      	beq.n	8002fd2 <UART_SetConfig+0xfa>
 8002fae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fb2:	d817      	bhi.n	8002fe4 <UART_SetConfig+0x10c>
 8002fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fb8:	d011      	beq.n	8002fde <UART_SetConfig+0x106>
 8002fba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fbe:	d811      	bhi.n	8002fe4 <UART_SetConfig+0x10c>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <UART_SetConfig+0xf4>
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d006      	beq.n	8002fd8 <UART_SetConfig+0x100>
 8002fca:	e00b      	b.n	8002fe4 <UART_SetConfig+0x10c>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e08b      	b.n	80030ea <UART_SetConfig+0x212>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e088      	b.n	80030ea <UART_SetConfig+0x212>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e085      	b.n	80030ea <UART_SetConfig+0x212>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	77fb      	strb	r3, [r7, #31]
 8002fe2:	e082      	b.n	80030ea <UART_SetConfig+0x212>
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e07f      	b.n	80030ea <UART_SetConfig+0x212>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5b      	ldr	r2, [pc, #364]	; (800315c <UART_SetConfig+0x284>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d124      	bne.n	800303e <UART_SetConfig+0x166>
 8002ff4:	4b57      	ldr	r3, [pc, #348]	; (8003154 <UART_SetConfig+0x27c>)
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002ffc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003000:	d011      	beq.n	8003026 <UART_SetConfig+0x14e>
 8003002:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003006:	d817      	bhi.n	8003038 <UART_SetConfig+0x160>
 8003008:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800300c:	d011      	beq.n	8003032 <UART_SetConfig+0x15a>
 800300e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003012:	d811      	bhi.n	8003038 <UART_SetConfig+0x160>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <UART_SetConfig+0x148>
 8003018:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800301c:	d006      	beq.n	800302c <UART_SetConfig+0x154>
 800301e:	e00b      	b.n	8003038 <UART_SetConfig+0x160>
 8003020:	2300      	movs	r3, #0
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e061      	b.n	80030ea <UART_SetConfig+0x212>
 8003026:	2302      	movs	r3, #2
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e05e      	b.n	80030ea <UART_SetConfig+0x212>
 800302c:	2304      	movs	r3, #4
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e05b      	b.n	80030ea <UART_SetConfig+0x212>
 8003032:	2308      	movs	r3, #8
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e058      	b.n	80030ea <UART_SetConfig+0x212>
 8003038:	2310      	movs	r3, #16
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e055      	b.n	80030ea <UART_SetConfig+0x212>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a47      	ldr	r2, [pc, #284]	; (8003160 <UART_SetConfig+0x288>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d124      	bne.n	8003092 <UART_SetConfig+0x1ba>
 8003048:	4b42      	ldr	r3, [pc, #264]	; (8003154 <UART_SetConfig+0x27c>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003050:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003054:	d011      	beq.n	800307a <UART_SetConfig+0x1a2>
 8003056:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800305a:	d817      	bhi.n	800308c <UART_SetConfig+0x1b4>
 800305c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003060:	d011      	beq.n	8003086 <UART_SetConfig+0x1ae>
 8003062:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003066:	d811      	bhi.n	800308c <UART_SetConfig+0x1b4>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <UART_SetConfig+0x19c>
 800306c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003070:	d006      	beq.n	8003080 <UART_SetConfig+0x1a8>
 8003072:	e00b      	b.n	800308c <UART_SetConfig+0x1b4>
 8003074:	2300      	movs	r3, #0
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	e037      	b.n	80030ea <UART_SetConfig+0x212>
 800307a:	2302      	movs	r3, #2
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	e034      	b.n	80030ea <UART_SetConfig+0x212>
 8003080:	2304      	movs	r3, #4
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e031      	b.n	80030ea <UART_SetConfig+0x212>
 8003086:	2308      	movs	r3, #8
 8003088:	77fb      	strb	r3, [r7, #31]
 800308a:	e02e      	b.n	80030ea <UART_SetConfig+0x212>
 800308c:	2310      	movs	r3, #16
 800308e:	77fb      	strb	r3, [r7, #31]
 8003090:	e02b      	b.n	80030ea <UART_SetConfig+0x212>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a33      	ldr	r2, [pc, #204]	; (8003164 <UART_SetConfig+0x28c>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d124      	bne.n	80030e6 <UART_SetConfig+0x20e>
 800309c:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <UART_SetConfig+0x27c>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80030a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030a8:	d011      	beq.n	80030ce <UART_SetConfig+0x1f6>
 80030aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030ae:	d817      	bhi.n	80030e0 <UART_SetConfig+0x208>
 80030b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030b4:	d011      	beq.n	80030da <UART_SetConfig+0x202>
 80030b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ba:	d811      	bhi.n	80030e0 <UART_SetConfig+0x208>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <UART_SetConfig+0x1f0>
 80030c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030c4:	d006      	beq.n	80030d4 <UART_SetConfig+0x1fc>
 80030c6:	e00b      	b.n	80030e0 <UART_SetConfig+0x208>
 80030c8:	2300      	movs	r3, #0
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e00d      	b.n	80030ea <UART_SetConfig+0x212>
 80030ce:	2302      	movs	r3, #2
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e00a      	b.n	80030ea <UART_SetConfig+0x212>
 80030d4:	2304      	movs	r3, #4
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e007      	b.n	80030ea <UART_SetConfig+0x212>
 80030da:	2308      	movs	r3, #8
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e004      	b.n	80030ea <UART_SetConfig+0x212>
 80030e0:	2310      	movs	r3, #16
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e001      	b.n	80030ea <UART_SetConfig+0x212>
 80030e6:	2310      	movs	r3, #16
 80030e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f2:	d16b      	bne.n	80031cc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80030f4:	7ffb      	ldrb	r3, [r7, #31]
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d838      	bhi.n	800316c <UART_SetConfig+0x294>
 80030fa:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <UART_SetConfig+0x228>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	08003125 	.word	0x08003125
 8003104:	0800312d 	.word	0x0800312d
 8003108:	08003135 	.word	0x08003135
 800310c:	0800316d 	.word	0x0800316d
 8003110:	0800313b 	.word	0x0800313b
 8003114:	0800316d 	.word	0x0800316d
 8003118:	0800316d 	.word	0x0800316d
 800311c:	0800316d 	.word	0x0800316d
 8003120:	08003143 	.word	0x08003143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003124:	f7ff f920 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8003128:	61b8      	str	r0, [r7, #24]
        break;
 800312a:	e024      	b.n	8003176 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800312c:	f7ff f93e 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 8003130:	61b8      	str	r0, [r7, #24]
        break;
 8003132:	e020      	b.n	8003176 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <UART_SetConfig+0x290>)
 8003136:	61bb      	str	r3, [r7, #24]
        break;
 8003138:	e01d      	b.n	8003176 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313a:	f7ff f89f 	bl	800227c <HAL_RCC_GetSysClockFreq>
 800313e:	61b8      	str	r0, [r7, #24]
        break;
 8003140:	e019      	b.n	8003176 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003146:	61bb      	str	r3, [r7, #24]
        break;
 8003148:	e015      	b.n	8003176 <UART_SetConfig+0x29e>
 800314a:	bf00      	nop
 800314c:	efff69f3 	.word	0xefff69f3
 8003150:	40013800 	.word	0x40013800
 8003154:	40021000 	.word	0x40021000
 8003158:	40004400 	.word	0x40004400
 800315c:	40004800 	.word	0x40004800
 8003160:	40004c00 	.word	0x40004c00
 8003164:	40005000 	.word	0x40005000
 8003168:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	77bb      	strb	r3, [r7, #30]
        break;
 8003174:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d073      	beq.n	8003264 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	005a      	lsls	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	441a      	add	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b0f      	cmp	r3, #15
 8003196:	d916      	bls.n	80031c6 <UART_SetConfig+0x2ee>
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319e:	d212      	bcs.n	80031c6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f023 030f 	bic.w	r3, r3, #15
 80031a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	89fb      	ldrh	r3, [r7, #14]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	89fa      	ldrh	r2, [r7, #14]
 80031c2:	60da      	str	r2, [r3, #12]
 80031c4:	e04e      	b.n	8003264 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	77bb      	strb	r3, [r7, #30]
 80031ca:	e04b      	b.n	8003264 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031cc:	7ffb      	ldrb	r3, [r7, #31]
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d827      	bhi.n	8003222 <UART_SetConfig+0x34a>
 80031d2:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <UART_SetConfig+0x300>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	080031fd 	.word	0x080031fd
 80031dc:	08003205 	.word	0x08003205
 80031e0:	0800320d 	.word	0x0800320d
 80031e4:	08003223 	.word	0x08003223
 80031e8:	08003213 	.word	0x08003213
 80031ec:	08003223 	.word	0x08003223
 80031f0:	08003223 	.word	0x08003223
 80031f4:	08003223 	.word	0x08003223
 80031f8:	0800321b 	.word	0x0800321b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031fc:	f7ff f8b4 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8003200:	61b8      	str	r0, [r7, #24]
        break;
 8003202:	e013      	b.n	800322c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003204:	f7ff f8d2 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 8003208:	61b8      	str	r0, [r7, #24]
        break;
 800320a:	e00f      	b.n	800322c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <UART_SetConfig+0x3a4>)
 800320e:	61bb      	str	r3, [r7, #24]
        break;
 8003210:	e00c      	b.n	800322c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003212:	f7ff f833 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8003216:	61b8      	str	r0, [r7, #24]
        break;
 8003218:	e008      	b.n	800322c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800321a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321e:	61bb      	str	r3, [r7, #24]
        break;
 8003220:	e004      	b.n	800322c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	77bb      	strb	r3, [r7, #30]
        break;
 800322a:	bf00      	nop
    }

    if (pclk != 0U)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d018      	beq.n	8003264 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	085a      	lsrs	r2, r3, #1
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	441a      	add	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b0f      	cmp	r3, #15
 800324a:	d909      	bls.n	8003260 <UART_SetConfig+0x388>
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003252:	d205      	bcs.n	8003260 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	b29a      	uxth	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	e001      	b.n	8003264 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003270:	7fbb      	ldrb	r3, [r7, #30]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	007a1200 	.word	0x007a1200

08003280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	f003 0320 	and.w	r3, r3, #32
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01a      	beq.n	8003396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800337e:	d10a      	bne.n	8003396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b098      	sub	sp, #96	; 0x60
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033d4:	f7fd fac0 	bl	8000958 <HAL_GetTick>
 80033d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d12e      	bne.n	8003446 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f0:	2200      	movs	r2, #0
 80033f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f88c 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d021      	beq.n	8003446 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340a:	e853 3f00 	ldrex	r3, [r3]
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003416:	653b      	str	r3, [r7, #80]	; 0x50
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
 8003422:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003428:	e841 2300 	strex	r3, r2, [r1]
 800342c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800342e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1e6      	bne.n	8003402 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e062      	b.n	800350c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d149      	bne.n	80034e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800345c:	2200      	movs	r2, #0
 800345e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f856 	bl	8003514 <UART_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d03c      	beq.n	80034e8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	623b      	str	r3, [r7, #32]
   return(result);
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
 800348e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800349a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e6      	bne.n	800346e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3308      	adds	r3, #8
 80034a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034c0:	61fa      	str	r2, [r7, #28]
 80034c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	69b9      	ldr	r1, [r7, #24]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	617b      	str	r3, [r7, #20]
   return(result);
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e011      	b.n	800350c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3758      	adds	r7, #88	; 0x58
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003524:	e049      	b.n	80035ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d045      	beq.n	80035ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7fd fa13 	bl	8000958 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <UART_WaitOnFlagUntilTimeout+0x30>
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e048      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d031      	beq.n	80035ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d110      	bne.n	8003586 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2208      	movs	r2, #8
 800356a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 f838 	bl	80035e2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2208      	movs	r2, #8
 8003576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e029      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003594:	d111      	bne.n	80035ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800359e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f81e 	bl	80035e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e00f      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4013      	ands	r3, r2
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	bf0c      	ite	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	2300      	movne	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d0a6      	beq.n	8003526 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b095      	sub	sp, #84	; 0x54
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003608:	643b      	str	r3, [r7, #64]	; 0x40
 800360a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800360e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e6      	bne.n	80035ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3308      	adds	r3, #8
 8003622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	61fb      	str	r3, [r7, #28]
   return(result);
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	64bb      	str	r3, [r7, #72]	; 0x48
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3308      	adds	r3, #8
 800363a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800363c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e5      	bne.n	800361c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003654:	2b01      	cmp	r3, #1
 8003656:	d118      	bne.n	800368a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	60bb      	str	r3, [r7, #8]
   return(result);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f023 0310 	bic.w	r3, r3, #16
 800366c:	647b      	str	r3, [r7, #68]	; 0x44
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6979      	ldr	r1, [r7, #20]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	613b      	str	r3, [r7, #16]
   return(result);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e6      	bne.n	8003658 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2220      	movs	r2, #32
 800368e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800369e:	bf00      	nop
 80036a0:	3754      	adds	r7, #84	; 0x54
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b2:	f3ef 8305 	mrs	r3, IPSR
 80036b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80036b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10f      	bne.n	80036de <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036be:	f3ef 8310 	mrs	r3, PRIMASK
 80036c2:	607b      	str	r3, [r7, #4]
  return(result);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <osKernelInitialize+0x32>
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <osKernelInitialize+0x64>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d109      	bne.n	80036e6 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036d2:	f3ef 8311 	mrs	r3, BASEPRI
 80036d6:	603b      	str	r3, [r7, #0]
  return(result);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80036de:	f06f 0305 	mvn.w	r3, #5
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e00c      	b.n	8003700 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <osKernelInitialize+0x64>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d105      	bne.n	80036fa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <osKernelInitialize+0x64>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	e002      	b.n	8003700 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
 80036fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003700:	68fb      	ldr	r3, [r7, #12]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000174 	.word	0x20000174

08003714 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800371a:	f3ef 8305 	mrs	r3, IPSR
 800371e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003720:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10f      	bne.n	8003746 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003726:	f3ef 8310 	mrs	r3, PRIMASK
 800372a:	607b      	str	r3, [r7, #4]
  return(result);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <osKernelStart+0x32>
 8003732:	4b11      	ldr	r3, [pc, #68]	; (8003778 <osKernelStart+0x64>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d109      	bne.n	800374e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800373a:	f3ef 8311 	mrs	r3, BASEPRI
 800373e:	603b      	str	r3, [r7, #0]
  return(result);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003746:	f06f 0305 	mvn.w	r3, #5
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e00e      	b.n	800376c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800374e:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <osKernelStart+0x64>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d107      	bne.n	8003766 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003756:	4b08      	ldr	r3, [pc, #32]	; (8003778 <osKernelStart+0x64>)
 8003758:	2202      	movs	r2, #2
 800375a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800375c:	f001 f898 	bl	8004890 <vTaskStartScheduler>
      stat = osOK;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e002      	b.n	800376c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003766:	f04f 33ff 	mov.w	r3, #4294967295
 800376a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800376c:	68fb      	ldr	r3, [r7, #12]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000174 	.word	0x20000174

0800377c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b092      	sub	sp, #72	; 0x48
 8003780:	af04      	add	r7, sp, #16
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800378c:	f3ef 8305 	mrs	r3, IPSR
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003794:	2b00      	cmp	r3, #0
 8003796:	f040 8094 	bne.w	80038c2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379a:	f3ef 8310 	mrs	r3, PRIMASK
 800379e:	623b      	str	r3, [r7, #32]
  return(result);
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 808d 	bne.w	80038c2 <osThreadNew+0x146>
 80037a8:	4b48      	ldr	r3, [pc, #288]	; (80038cc <osThreadNew+0x150>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d106      	bne.n	80037be <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037b0:	f3ef 8311 	mrs	r3, BASEPRI
 80037b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f040 8082 	bne.w	80038c2 <osThreadNew+0x146>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d07e      	beq.n	80038c2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80037c8:	2318      	movs	r3, #24
 80037ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80037cc:	2300      	movs	r3, #0
 80037ce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80037d0:	f107 031b 	add.w	r3, r7, #27
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d045      	beq.n	800386e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <osThreadNew+0x74>
        name = attr->name;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80037fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <osThreadNew+0x9a>
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	2b38      	cmp	r3, #56	; 0x38
 8003808:	d805      	bhi.n	8003816 <osThreadNew+0x9a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <osThreadNew+0x9e>
        return (NULL);
 8003816:	2300      	movs	r3, #0
 8003818:	e054      	b.n	80038c4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	089b      	lsrs	r3, r3, #2
 8003828:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00e      	beq.n	8003850 <osThreadNew+0xd4>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	2bbb      	cmp	r3, #187	; 0xbb
 8003838:	d90a      	bls.n	8003850 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <osThreadNew+0xd4>
        mem = 1;
 800384a:	2301      	movs	r3, #1
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
 800384e:	e010      	b.n	8003872 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10c      	bne.n	8003872 <osThreadNew+0xf6>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d108      	bne.n	8003872 <osThreadNew+0xf6>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d104      	bne.n	8003872 <osThreadNew+0xf6>
          mem = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
 800386c:	e001      	b.n	8003872 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	2b01      	cmp	r3, #1
 8003876:	d110      	bne.n	800389a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003880:	9202      	str	r2, [sp, #8]
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800388c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fe1a 	bl	80044c8 <xTaskCreateStatic>
 8003894:	4603      	mov	r3, r0
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e013      	b.n	80038c2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	2b00      	cmp	r3, #0
 800389e:	d110      	bne.n	80038c2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fe64 	bl	8004580 <xTaskCreate>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d001      	beq.n	80038c2 <osThreadNew+0x146>
          hTask = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80038c2:	697b      	ldr	r3, [r7, #20]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3738      	adds	r7, #56	; 0x38
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000174 	.word	0x20000174

080038d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038d8:	f3ef 8305 	mrs	r3, IPSR
 80038dc:	613b      	str	r3, [r7, #16]
  return(result);
 80038de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10f      	bne.n	8003904 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e4:	f3ef 8310 	mrs	r3, PRIMASK
 80038e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <osDelay+0x34>
 80038f0:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <osDelay+0x58>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d109      	bne.n	800390c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038f8:	f3ef 8311 	mrs	r3, BASEPRI
 80038fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <osDelay+0x3c>
    stat = osErrorISR;
 8003904:	f06f 0305 	mvn.w	r3, #5
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	e007      	b.n	800391c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 ff86 	bl	8004828 <vTaskDelay>
    }
  }

  return (stat);
 800391c:	697b      	ldr	r3, [r7, #20]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000174 	.word	0x20000174

0800392c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a07      	ldr	r2, [pc, #28]	; (8003958 <vApplicationGetIdleTaskMemory+0x2c>)
 800393c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4a06      	ldr	r2, [pc, #24]	; (800395c <vApplicationGetIdleTaskMemory+0x30>)
 8003942:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	601a      	str	r2, [r3, #0]
}
 800394a:	bf00      	nop
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000178 	.word	0x20000178
 800395c:	20000234 	.word	0x20000234

08003960 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4a07      	ldr	r2, [pc, #28]	; (800398c <vApplicationGetTimerTaskMemory+0x2c>)
 8003970:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4a06      	ldr	r2, [pc, #24]	; (8003990 <vApplicationGetTimerTaskMemory+0x30>)
 8003976:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800397e:	601a      	str	r2, [r3, #0]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	20000434 	.word	0x20000434
 8003990:	200004f0 	.word	0x200004f0

08003994 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f103 0208 	add.w	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f103 0208 	add.w	r2, r3, #8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f103 0208 	add.w	r2, r3, #8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	601a      	str	r2, [r3, #0]
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d103      	bne.n	8003a56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	e00c      	b.n	8003a70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3308      	adds	r3, #8
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e002      	b.n	8003a64 <vListInsert+0x2e>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d2f6      	bcs.n	8003a5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	601a      	str	r2, [r3, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6892      	ldr	r2, [r2, #8]
 8003abe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6852      	ldr	r2, [r2, #4]
 8003ac8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d103      	bne.n	8003adc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	1e5a      	subs	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b22:	bf00      	nop
 8003b24:	e7fe      	b.n	8003b24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b26:	f002 f835 	bl	8005b94 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	68f9      	ldr	r1, [r7, #12]
 8003b34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	441a      	add	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b56:	3b01      	subs	r3, #1
 8003b58:	68f9      	ldr	r1, [r7, #12]
 8003b5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	441a      	add	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	22ff      	movs	r2, #255	; 0xff
 8003b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	22ff      	movs	r2, #255	; 0xff
 8003b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d114      	bne.n	8003ba6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01a      	beq.n	8003bba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3310      	adds	r3, #16
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 f91f 	bl	8004dcc <xTaskRemoveFromEventList>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d012      	beq.n	8003bba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b94:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <xQueueGenericReset+0xcc>)
 8003b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	f3bf 8f6f 	isb	sy
 8003ba4:	e009      	b.n	8003bba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3310      	adds	r3, #16
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fef2 	bl	8003994 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	3324      	adds	r3, #36	; 0x24
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff feed 	bl	8003994 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003bba:	f002 f81b 	bl	8005bf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003bbe:	2301      	movs	r3, #1
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	e000ed04 	.word	0xe000ed04

08003bcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08e      	sub	sp, #56	; 0x38
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bf2:	bf00      	nop
 8003bf4:	e7fe      	b.n	8003bf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c0e:	bf00      	nop
 8003c10:	e7fe      	b.n	8003c10 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <xQueueGenericCreateStatic+0x52>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <xQueueGenericCreateStatic+0x56>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <xQueueGenericCreateStatic+0x58>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	623b      	str	r3, [r7, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <xQueueGenericCreateStatic+0x7e>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <xQueueGenericCreateStatic+0x82>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <xQueueGenericCreateStatic+0x84>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	61fb      	str	r3, [r7, #28]
}
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c6a:	2350      	movs	r3, #80	; 0x50
 8003c6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b50      	cmp	r3, #80	; 0x50
 8003c72:	d00a      	beq.n	8003c8a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	61bb      	str	r3, [r7, #24]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00d      	beq.n	8003cb0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c9c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f805 	bl	8003cba <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3730      	adds	r7, #48	; 0x30
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e002      	b.n	8003cdc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ce8:	2101      	movs	r1, #1
 8003cea:	69b8      	ldr	r0, [r7, #24]
 8003cec:	f7ff ff06 	bl	8003afc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08e      	sub	sp, #56	; 0x38
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <xQueueGenericSend+0x32>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <xQueueGenericSend+0x40>
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <xQueueGenericSend+0x44>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <xQueueGenericSend+0x46>
 8003d44:	2300      	movs	r3, #0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <xQueueGenericSend+0x60>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d103      	bne.n	8003d6e <xQueueGenericSend+0x6e>
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <xQueueGenericSend+0x72>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <xQueueGenericSend+0x74>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <xQueueGenericSend+0x8e>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	623b      	str	r3, [r7, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d8e:	f001 f9e5 	bl	800515c <xTaskGetSchedulerState>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <xQueueGenericSend+0x9e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <xQueueGenericSend+0xa2>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <xQueueGenericSend+0xa4>
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xQueueGenericSend+0xbe>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	61fb      	str	r3, [r7, #28]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dbe:	f001 fee9 	bl	8005b94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <xQueueGenericSend+0xd4>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d129      	bne.n	8003e28 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dda:	f000 fa07 	bl	80041ec <prvCopyDataToQueue>
 8003dde:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d010      	beq.n	8003e0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	3324      	adds	r3, #36	; 0x24
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 ffed 	bl	8004dcc <xTaskRemoveFromEventList>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d013      	beq.n	8003e20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003df8:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <xQueueGenericSend+0x1f8>)
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	e00a      	b.n	8003e20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <xQueueGenericSend+0x1f8>)
 8003e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e20:	f001 fee8 	bl	8005bf4 <vPortExitCritical>
				return pdPASS;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e063      	b.n	8003ef0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e2e:	f001 fee1 	bl	8005bf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e05c      	b.n	8003ef0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e3c:	f107 0314 	add.w	r3, r7, #20
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 f827 	bl	8004e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e46:	2301      	movs	r3, #1
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e4a:	f001 fed3 	bl	8005bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e4e:	f000 fd8f 	bl	8004970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e52:	f001 fe9f 	bl	8005b94 <vPortEnterCritical>
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d103      	bne.n	8003e6c <xQueueGenericSend+0x16c>
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e78:	d103      	bne.n	8003e82 <xQueueGenericSend+0x182>
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e82:	f001 feb7 	bl	8005bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e86:	1d3a      	adds	r2, r7, #4
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 f816 	bl	8004ec0 <xTaskCheckForTimeOut>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d124      	bne.n	8003ee4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e9c:	f000 fa9e 	bl	80043dc <prvIsQueueFull>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d018      	beq.n	8003ed8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	3310      	adds	r3, #16
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4611      	mov	r1, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 ff3c 	bl	8004d2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eb6:	f000 fa29 	bl	800430c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003eba:	f000 fd67 	bl	800498c <xTaskResumeAll>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f47f af7c 	bne.w	8003dbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <xQueueGenericSend+0x1f8>)
 8003ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	e772      	b.n	8003dbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eda:	f000 fa17 	bl	800430c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ede:	f000 fd55 	bl	800498c <xTaskResumeAll>
 8003ee2:	e76c      	b.n	8003dbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ee6:	f000 fa11 	bl	800430c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eea:	f000 fd4f 	bl	800498c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003eee:	2300      	movs	r3, #0
		}
	}
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3738      	adds	r7, #56	; 0x38
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08e      	sub	sp, #56	; 0x38
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <xQueueGenericSendFromISR+0x3c>
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <xQueueGenericSendFromISR+0x40>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <xQueueGenericSendFromISR+0x42>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	623b      	str	r3, [r7, #32]
}
 8003f54:	bf00      	nop
 8003f56:	e7fe      	b.n	8003f56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d103      	bne.n	8003f66 <xQueueGenericSendFromISR+0x6a>
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <xQueueGenericSendFromISR+0x6e>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <xQueueGenericSendFromISR+0x70>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10a      	bne.n	8003f86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	61fb      	str	r3, [r7, #28]
}
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f86:	f001 fee7 	bl	8005d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f8a:	f3ef 8211 	mrs	r2, BASEPRI
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	61ba      	str	r2, [r7, #24]
 8003fa0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d302      	bcc.n	8003fb8 <xQueueGenericSendFromISR+0xbc>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d12c      	bne.n	8004012 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fc8:	f000 f910 	bl	80041ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fcc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d112      	bne.n	8003ffc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	3324      	adds	r3, #36	; 0x24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fef2 	bl	8004dcc <xTaskRemoveFromEventList>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00e      	beq.n	800400c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00b      	beq.n	800400c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	e007      	b.n	800400c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ffc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004000:	3301      	adds	r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	b25a      	sxtb	r2, r3
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800400c:	2301      	movs	r3, #1
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004010:	e001      	b.n	8004016 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004012:	2300      	movs	r3, #0
 8004014:	637b      	str	r3, [r7, #52]	; 0x34
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004020:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004024:	4618      	mov	r0, r3
 8004026:	3738      	adds	r7, #56	; 0x38
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	; 0x30
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004038:	2300      	movs	r3, #0
 800403a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <xQueueReceive+0x30>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	623b      	str	r3, [r7, #32]
}
 8004058:	bf00      	nop
 800405a:	e7fe      	b.n	800405a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <xQueueReceive+0x3e>
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <xQueueReceive+0x42>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <xQueueReceive+0x44>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <xQueueReceive+0x5e>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	61fb      	str	r3, [r7, #28]
}
 8004086:	bf00      	nop
 8004088:	e7fe      	b.n	8004088 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800408a:	f001 f867 	bl	800515c <xTaskGetSchedulerState>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <xQueueReceive+0x6e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <xQueueReceive+0x72>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <xQueueReceive+0x74>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xQueueReceive+0x8e>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	61bb      	str	r3, [r7, #24]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80040ba:	f001 fd6b 	bl	8005b94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01f      	beq.n	800410a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040ce:	f000 f8f7 	bl	80042c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	1e5a      	subs	r2, r3, #1
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00f      	beq.n	8004102 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	3310      	adds	r3, #16
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fe70 	bl	8004dcc <xTaskRemoveFromEventList>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040f2:	4b3d      	ldr	r3, [pc, #244]	; (80041e8 <xQueueReceive+0x1bc>)
 80040f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004102:	f001 fd77 	bl	8005bf4 <vPortExitCritical>
				return pdPASS;
 8004106:	2301      	movs	r3, #1
 8004108:	e069      	b.n	80041de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d103      	bne.n	8004118 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004110:	f001 fd70 	bl	8005bf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004114:	2300      	movs	r3, #0
 8004116:	e062      	b.n	80041de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800411e:	f107 0310 	add.w	r3, r7, #16
 8004122:	4618      	mov	r0, r3
 8004124:	f000 feb6 	bl	8004e94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800412c:	f001 fd62 	bl	8005bf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004130:	f000 fc1e 	bl	8004970 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004134:	f001 fd2e 	bl	8005b94 <vPortEnterCritical>
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800413e:	b25b      	sxtb	r3, r3
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d103      	bne.n	800414e <xQueueReceive+0x122>
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004154:	b25b      	sxtb	r3, r3
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d103      	bne.n	8004164 <xQueueReceive+0x138>
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004164:	f001 fd46 	bl	8005bf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004168:	1d3a      	adds	r2, r7, #4
 800416a:	f107 0310 	add.w	r3, r7, #16
 800416e:	4611      	mov	r1, r2
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fea5 	bl	8004ec0 <xTaskCheckForTimeOut>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d123      	bne.n	80041c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800417c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800417e:	f000 f917 	bl	80043b0 <prvIsQueueEmpty>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d017      	beq.n	80041b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418a:	3324      	adds	r3, #36	; 0x24
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	4611      	mov	r1, r2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fdcb 	bl	8004d2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004198:	f000 f8b8 	bl	800430c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800419c:	f000 fbf6 	bl	800498c <xTaskResumeAll>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d189      	bne.n	80040ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <xQueueReceive+0x1bc>)
 80041a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	e780      	b.n	80040ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ba:	f000 f8a7 	bl	800430c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041be:	f000 fbe5 	bl	800498c <xTaskResumeAll>
 80041c2:	e77a      	b.n	80040ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c6:	f000 f8a1 	bl	800430c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041ca:	f000 fbdf 	bl	800498c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041d0:	f000 f8ee 	bl	80043b0 <prvIsQueueEmpty>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f43f af6f 	beq.w	80040ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3730      	adds	r7, #48	; 0x30
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10d      	bne.n	8004226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d14d      	bne.n	80042ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4618      	mov	r0, r3
 8004218:	f000 ffbe 	bl	8005198 <xTaskPriorityDisinherit>
 800421c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	605a      	str	r2, [r3, #4]
 8004224:	e043      	b.n	80042ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d119      	bne.n	8004260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6898      	ldr	r0, [r3, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	461a      	mov	r2, r3
 8004236:	68b9      	ldr	r1, [r7, #8]
 8004238:	f001 ffce 	bl	80061d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	d32b      	bcc.n	80042ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	e026      	b.n	80042ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	68d8      	ldr	r0, [r3, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	461a      	mov	r2, r3
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	f001 ffb4 	bl	80061d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	425b      	negs	r3, r3
 800427a:	441a      	add	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d207      	bcs.n	800429c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	425b      	negs	r3, r3
 8004296:	441a      	add	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d105      	bne.n	80042ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80042b6:	697b      	ldr	r3, [r7, #20]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d018      	beq.n	8004304 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	441a      	add	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d303      	bcc.n	80042f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68d9      	ldr	r1, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	461a      	mov	r2, r3
 80042fe:	6838      	ldr	r0, [r7, #0]
 8004300:	f001 ff6a 	bl	80061d8 <memcpy>
	}
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004314:	f001 fc3e 	bl	8005b94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800431e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004320:	e011      	b.n	8004346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d012      	beq.n	8004350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3324      	adds	r3, #36	; 0x24
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fd4c 	bl	8004dcc <xTaskRemoveFromEventList>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800433a:	f000 fe23 	bl	8004f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	3b01      	subs	r3, #1
 8004342:	b2db      	uxtb	r3, r3
 8004344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434a:	2b00      	cmp	r3, #0
 800434c:	dce9      	bgt.n	8004322 <prvUnlockQueue+0x16>
 800434e:	e000      	b.n	8004352 <prvUnlockQueue+0x46>
					break;
 8004350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	22ff      	movs	r2, #255	; 0xff
 8004356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800435a:	f001 fc4b 	bl	8005bf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800435e:	f001 fc19 	bl	8005b94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800436a:	e011      	b.n	8004390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d012      	beq.n	800439a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3310      	adds	r3, #16
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fd27 	bl	8004dcc <xTaskRemoveFromEventList>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004384:	f000 fdfe 	bl	8004f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004388:	7bbb      	ldrb	r3, [r7, #14]
 800438a:	3b01      	subs	r3, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004394:	2b00      	cmp	r3, #0
 8004396:	dce9      	bgt.n	800436c <prvUnlockQueue+0x60>
 8004398:	e000      	b.n	800439c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800439a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	22ff      	movs	r2, #255	; 0xff
 80043a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80043a4:	f001 fc26 	bl	8005bf4 <vPortExitCritical>
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043b8:	f001 fbec 	bl	8005b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80043c4:	2301      	movs	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e001      	b.n	80043ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043ce:	f001 fc11 	bl	8005bf4 <vPortExitCritical>

	return xReturn;
 80043d2:	68fb      	ldr	r3, [r7, #12]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043e4:	f001 fbd6 	bl	8005b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d102      	bne.n	80043fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043f4:	2301      	movs	r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e001      	b.n	80043fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043fe:	f001 fbf9 	bl	8005bf4 <vPortExitCritical>

	return xReturn;
 8004402:	68fb      	ldr	r3, [r7, #12]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	e014      	b.n	8004446 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800441c:	4a0f      	ldr	r2, [pc, #60]	; (800445c <vQueueAddToRegistry+0x50>)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10b      	bne.n	8004440 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004428:	490c      	ldr	r1, [pc, #48]	; (800445c <vQueueAddToRegistry+0x50>)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <vQueueAddToRegistry+0x50>)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800443e:	e006      	b.n	800444e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3301      	adds	r3, #1
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b07      	cmp	r3, #7
 800444a:	d9e7      	bls.n	800441c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200008f0 	.word	0x200008f0

08004460 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004470:	f001 fb90 	bl	8005b94 <vPortEnterCritical>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800447a:	b25b      	sxtb	r3, r3
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d103      	bne.n	800448a <vQueueWaitForMessageRestricted+0x2a>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004490:	b25b      	sxtb	r3, r3
 8004492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004496:	d103      	bne.n	80044a0 <vQueueWaitForMessageRestricted+0x40>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044a0:	f001 fba8 	bl	8005bf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	3324      	adds	r3, #36	; 0x24
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fc5d 	bl	8004d74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80044ba:	6978      	ldr	r0, [r7, #20]
 80044bc:	f7ff ff26 	bl	800430c <prvUnlockQueue>
	}
 80044c0:	bf00      	nop
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08e      	sub	sp, #56	; 0x38
 80044cc:	af04      	add	r7, sp, #16
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	623b      	str	r3, [r7, #32]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10a      	bne.n	800450e <xTaskCreateStatic+0x46>
	__asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	61fb      	str	r3, [r7, #28]
}
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800450e:	23bc      	movs	r3, #188	; 0xbc
 8004510:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2bbc      	cmp	r3, #188	; 0xbc
 8004516:	d00a      	beq.n	800452e <xTaskCreateStatic+0x66>
	__asm volatile
 8004518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451c:	f383 8811 	msr	BASEPRI, r3
 8004520:	f3bf 8f6f 	isb	sy
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	61bb      	str	r3, [r7, #24]
}
 800452a:	bf00      	nop
 800452c:	e7fe      	b.n	800452c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01e      	beq.n	8004572 <xTaskCreateStatic+0xaa>
 8004534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01b      	beq.n	8004572 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004542:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	2202      	movs	r2, #2
 8004548:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800454c:	2300      	movs	r3, #0
 800454e:	9303      	str	r3, [sp, #12]
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	9302      	str	r3, [sp, #8]
 8004554:	f107 0314 	add.w	r3, r7, #20
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 f851 	bl	800460c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800456a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800456c:	f000 f8ec 	bl	8004748 <prvAddNewTaskToReadyList>
 8004570:	e001      	b.n	8004576 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004576:	697b      	ldr	r3, [r7, #20]
	}
 8004578:	4618      	mov	r0, r3
 800457a:	3728      	adds	r7, #40	; 0x28
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08c      	sub	sp, #48	; 0x30
 8004584:	af04      	add	r7, sp, #16
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4618      	mov	r0, r3
 8004596:	f001 fc1f 	bl	8005dd8 <pvPortMalloc>
 800459a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00e      	beq.n	80045c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80045a2:	20bc      	movs	r0, #188	; 0xbc
 80045a4:	f001 fc18 	bl	8005dd8 <pvPortMalloc>
 80045a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
 80045b6:	e005      	b.n	80045c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045b8:	6978      	ldr	r0, [r7, #20]
 80045ba:	f001 fcd1 	bl	8005f60 <vPortFree>
 80045be:	e001      	b.n	80045c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d017      	beq.n	80045fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	2300      	movs	r3, #0
 80045d6:	9303      	str	r3, [sp, #12]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	9302      	str	r3, [sp, #8]
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f80f 	bl	800460c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045ee:	69f8      	ldr	r0, [r7, #28]
 80045f0:	f000 f8aa 	bl	8004748 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045f4:	2301      	movs	r3, #1
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	e002      	b.n	8004600 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295
 80045fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004600:	69bb      	ldr	r3, [r7, #24]
	}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b088      	sub	sp, #32
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	461a      	mov	r2, r3
 8004624:	21a5      	movs	r1, #165	; 0xa5
 8004626:	f001 fde5 	bl	80061f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004634:	3b01      	subs	r3, #1
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f023 0307 	bic.w	r3, r3, #7
 8004642:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <prvInitialiseNewTask+0x58>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	617b      	str	r3, [r7, #20]
}
 8004660:	bf00      	nop
 8004662:	e7fe      	b.n	8004662 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	e012      	b.n	8004690 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	4413      	add	r3, r2
 8004670:	7819      	ldrb	r1, [r3, #0]
 8004672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	4413      	add	r3, r2
 8004678:	3334      	adds	r3, #52	; 0x34
 800467a:	460a      	mov	r2, r1
 800467c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d006      	beq.n	8004698 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3301      	adds	r3, #1
 800468e:	61fb      	str	r3, [r7, #28]
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	2b0f      	cmp	r3, #15
 8004694:	d9e9      	bls.n	800466a <prvInitialiseNewTask+0x5e>
 8004696:	e000      	b.n	800469a <prvInitialiseNewTask+0x8e>
		{
			break;
 8004698:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800469a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	2b37      	cmp	r3, #55	; 0x37
 80046a6:	d901      	bls.n	80046ac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046a8:	2337      	movs	r3, #55	; 0x37
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	2200      	movs	r2, #0
 80046bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	3304      	adds	r3, #4
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff f986 	bl	80039d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	3318      	adds	r3, #24
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff f981 	bl	80039d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	3354      	adds	r3, #84	; 0x54
 80046fc:	2260      	movs	r2, #96	; 0x60
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f001 fd77 	bl	80061f4 <memset>
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	4a0c      	ldr	r2, [pc, #48]	; (800473c <prvInitialiseNewTask+0x130>)
 800470a:	659a      	str	r2, [r3, #88]	; 0x58
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	4a0c      	ldr	r2, [pc, #48]	; (8004740 <prvInitialiseNewTask+0x134>)
 8004710:	65da      	str	r2, [r3, #92]	; 0x5c
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	4a0b      	ldr	r2, [pc, #44]	; (8004744 <prvInitialiseNewTask+0x138>)
 8004716:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	68f9      	ldr	r1, [r7, #12]
 800471c:	69b8      	ldr	r0, [r7, #24]
 800471e:	f001 f90f 	bl	8005940 <pxPortInitialiseStack>
 8004722:	4602      	mov	r2, r0
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004732:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004734:	bf00      	nop
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	08006470 	.word	0x08006470
 8004740:	08006490 	.word	0x08006490
 8004744:	08006450 	.word	0x08006450

08004748 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004750:	f001 fa20 	bl	8005b94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004754:	4b2d      	ldr	r3, [pc, #180]	; (800480c <prvAddNewTaskToReadyList+0xc4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3301      	adds	r3, #1
 800475a:	4a2c      	ldr	r2, [pc, #176]	; (800480c <prvAddNewTaskToReadyList+0xc4>)
 800475c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800475e:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <prvAddNewTaskToReadyList+0xc8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d109      	bne.n	800477a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004766:	4a2a      	ldr	r2, [pc, #168]	; (8004810 <prvAddNewTaskToReadyList+0xc8>)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800476c:	4b27      	ldr	r3, [pc, #156]	; (800480c <prvAddNewTaskToReadyList+0xc4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d110      	bne.n	8004796 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004774:	f000 fc2a 	bl	8004fcc <prvInitialiseTaskLists>
 8004778:	e00d      	b.n	8004796 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800477a:	4b26      	ldr	r3, [pc, #152]	; (8004814 <prvAddNewTaskToReadyList+0xcc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004782:	4b23      	ldr	r3, [pc, #140]	; (8004810 <prvAddNewTaskToReadyList+0xc8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	429a      	cmp	r2, r3
 800478e:	d802      	bhi.n	8004796 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004790:	4a1f      	ldr	r2, [pc, #124]	; (8004810 <prvAddNewTaskToReadyList+0xc8>)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004796:	4b20      	ldr	r3, [pc, #128]	; (8004818 <prvAddNewTaskToReadyList+0xd0>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3301      	adds	r3, #1
 800479c:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <prvAddNewTaskToReadyList+0xd0>)
 800479e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80047a0:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <prvAddNewTaskToReadyList+0xd0>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	4b1b      	ldr	r3, [pc, #108]	; (800481c <prvAddNewTaskToReadyList+0xd4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d903      	bls.n	80047bc <prvAddNewTaskToReadyList+0x74>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	4a18      	ldr	r2, [pc, #96]	; (800481c <prvAddNewTaskToReadyList+0xd4>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4a15      	ldr	r2, [pc, #84]	; (8004820 <prvAddNewTaskToReadyList+0xd8>)
 80047ca:	441a      	add	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f7ff f90b 	bl	80039ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047d8:	f001 fa0c 	bl	8005bf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047dc:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <prvAddNewTaskToReadyList+0xcc>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00e      	beq.n	8004802 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <prvAddNewTaskToReadyList+0xc8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d207      	bcs.n	8004802 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <prvAddNewTaskToReadyList+0xdc>)
 80047f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000e04 	.word	0x20000e04
 8004810:	20000930 	.word	0x20000930
 8004814:	20000e10 	.word	0x20000e10
 8004818:	20000e20 	.word	0x20000e20
 800481c:	20000e0c 	.word	0x20000e0c
 8004820:	20000934 	.word	0x20000934
 8004824:	e000ed04 	.word	0xe000ed04

08004828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d017      	beq.n	800486a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <vTaskDelay+0x60>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <vTaskDelay+0x30>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	60bb      	str	r3, [r7, #8]
}
 8004854:	bf00      	nop
 8004856:	e7fe      	b.n	8004856 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004858:	f000 f88a 	bl	8004970 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800485c:	2100      	movs	r1, #0
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fd08 	bl	8005274 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004864:	f000 f892 	bl	800498c <xTaskResumeAll>
 8004868:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <vTaskDelay+0x64>)
 8004872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	20000e2c 	.word	0x20000e2c
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	; 0x28
 8004894:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800489e:	463a      	mov	r2, r7
 80048a0:	1d39      	adds	r1, r7, #4
 80048a2:	f107 0308 	add.w	r3, r7, #8
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff f840 	bl	800392c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	9202      	str	r2, [sp, #8]
 80048b4:	9301      	str	r3, [sp, #4]
 80048b6:	2300      	movs	r3, #0
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	2300      	movs	r3, #0
 80048bc:	460a      	mov	r2, r1
 80048be:	4924      	ldr	r1, [pc, #144]	; (8004950 <vTaskStartScheduler+0xc0>)
 80048c0:	4824      	ldr	r0, [pc, #144]	; (8004954 <vTaskStartScheduler+0xc4>)
 80048c2:	f7ff fe01 	bl	80044c8 <xTaskCreateStatic>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4a23      	ldr	r2, [pc, #140]	; (8004958 <vTaskStartScheduler+0xc8>)
 80048ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048cc:	4b22      	ldr	r3, [pc, #136]	; (8004958 <vTaskStartScheduler+0xc8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048d4:	2301      	movs	r3, #1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e001      	b.n	80048de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d102      	bne.n	80048ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80048e4:	f000 fd1a 	bl	800531c <xTimerCreateTimerTask>
 80048e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d11b      	bne.n	8004928 <vTaskStartScheduler+0x98>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	613b      	str	r3, [r7, #16]
}
 8004902:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004904:	4b15      	ldr	r3, [pc, #84]	; (800495c <vTaskStartScheduler+0xcc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3354      	adds	r3, #84	; 0x54
 800490a:	4a15      	ldr	r2, [pc, #84]	; (8004960 <vTaskStartScheduler+0xd0>)
 800490c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800490e:	4b15      	ldr	r3, [pc, #84]	; (8004964 <vTaskStartScheduler+0xd4>)
 8004910:	f04f 32ff 	mov.w	r2, #4294967295
 8004914:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004916:	4b14      	ldr	r3, [pc, #80]	; (8004968 <vTaskStartScheduler+0xd8>)
 8004918:	2201      	movs	r2, #1
 800491a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800491c:	4b13      	ldr	r3, [pc, #76]	; (800496c <vTaskStartScheduler+0xdc>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004922:	f001 f895 	bl	8005a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004926:	e00e      	b.n	8004946 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d10a      	bne.n	8004946 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	60fb      	str	r3, [r7, #12]
}
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <vTaskStartScheduler+0xb4>
}
 8004946:	bf00      	nop
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	080063b8 	.word	0x080063b8
 8004954:	08004f9d 	.word	0x08004f9d
 8004958:	20000e28 	.word	0x20000e28
 800495c:	20000930 	.word	0x20000930
 8004960:	20000010 	.word	0x20000010
 8004964:	20000e24 	.word	0x20000e24
 8004968:	20000e10 	.word	0x20000e10
 800496c:	20000e08 	.word	0x20000e08

08004970 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004974:	4b04      	ldr	r3, [pc, #16]	; (8004988 <vTaskSuspendAll+0x18>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	4a03      	ldr	r2, [pc, #12]	; (8004988 <vTaskSuspendAll+0x18>)
 800497c:	6013      	str	r3, [r2, #0]
}
 800497e:	bf00      	nop
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	20000e2c 	.word	0x20000e2c

0800498c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800499a:	4b42      	ldr	r3, [pc, #264]	; (8004aa4 <xTaskResumeAll+0x118>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	603b      	str	r3, [r7, #0]
}
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049b8:	f001 f8ec 	bl	8005b94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049bc:	4b39      	ldr	r3, [pc, #228]	; (8004aa4 <xTaskResumeAll+0x118>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	4a38      	ldr	r2, [pc, #224]	; (8004aa4 <xTaskResumeAll+0x118>)
 80049c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c6:	4b37      	ldr	r3, [pc, #220]	; (8004aa4 <xTaskResumeAll+0x118>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d162      	bne.n	8004a94 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049ce:	4b36      	ldr	r3, [pc, #216]	; (8004aa8 <xTaskResumeAll+0x11c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d05e      	beq.n	8004a94 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049d6:	e02f      	b.n	8004a38 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80049d8:	4b34      	ldr	r3, [pc, #208]	; (8004aac <xTaskResumeAll+0x120>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	3318      	adds	r3, #24
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff f85f 	bl	8003aa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff f85a 	bl	8003aa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f8:	4b2d      	ldr	r3, [pc, #180]	; (8004ab0 <xTaskResumeAll+0x124>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d903      	bls.n	8004a08 <xTaskResumeAll+0x7c>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	4a2a      	ldr	r2, [pc, #168]	; (8004ab0 <xTaskResumeAll+0x124>)
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <xTaskResumeAll+0x128>)
 8004a16:	441a      	add	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f7fe ffe5 	bl	80039ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a28:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <xTaskResumeAll+0x12c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004a32:	4b22      	ldr	r3, [pc, #136]	; (8004abc <xTaskResumeAll+0x130>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a38:	4b1c      	ldr	r3, [pc, #112]	; (8004aac <xTaskResumeAll+0x120>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1cb      	bne.n	80049d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a46:	f000 fb63 	bl	8005110 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a4a:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <xTaskResumeAll+0x134>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d010      	beq.n	8004a78 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a56:	f000 f847 	bl	8004ae8 <xTaskIncrementTick>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a60:	4b16      	ldr	r3, [pc, #88]	; (8004abc <xTaskResumeAll+0x130>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f1      	bne.n	8004a56 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <xTaskResumeAll+0x134>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a78:	4b10      	ldr	r3, [pc, #64]	; (8004abc <xTaskResumeAll+0x130>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d009      	beq.n	8004a94 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <xTaskResumeAll+0x138>)
 8004a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a94:	f001 f8ae 	bl	8005bf4 <vPortExitCritical>

	return xAlreadyYielded;
 8004a98:	68bb      	ldr	r3, [r7, #8]
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000e2c 	.word	0x20000e2c
 8004aa8:	20000e04 	.word	0x20000e04
 8004aac:	20000dc4 	.word	0x20000dc4
 8004ab0:	20000e0c 	.word	0x20000e0c
 8004ab4:	20000934 	.word	0x20000934
 8004ab8:	20000930 	.word	0x20000930
 8004abc:	20000e18 	.word	0x20000e18
 8004ac0:	20000e14 	.word	0x20000e14
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <xTaskGetTickCount+0x1c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ad4:	687b      	ldr	r3, [r7, #4]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	20000e08 	.word	0x20000e08

08004ae8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af2:	4b51      	ldr	r3, [pc, #324]	; (8004c38 <xTaskIncrementTick+0x150>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f040 808e 	bne.w	8004c18 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004afc:	4b4f      	ldr	r3, [pc, #316]	; (8004c3c <xTaskIncrementTick+0x154>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3301      	adds	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b04:	4a4d      	ldr	r2, [pc, #308]	; (8004c3c <xTaskIncrementTick+0x154>)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d120      	bne.n	8004b52 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b10:	4b4b      	ldr	r3, [pc, #300]	; (8004c40 <xTaskIncrementTick+0x158>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <xTaskIncrementTick+0x48>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	603b      	str	r3, [r7, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <xTaskIncrementTick+0x46>
 8004b30:	4b43      	ldr	r3, [pc, #268]	; (8004c40 <xTaskIncrementTick+0x158>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	4b43      	ldr	r3, [pc, #268]	; (8004c44 <xTaskIncrementTick+0x15c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a41      	ldr	r2, [pc, #260]	; (8004c40 <xTaskIncrementTick+0x158>)
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	4a41      	ldr	r2, [pc, #260]	; (8004c44 <xTaskIncrementTick+0x15c>)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	4b40      	ldr	r3, [pc, #256]	; (8004c48 <xTaskIncrementTick+0x160>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	4a3f      	ldr	r2, [pc, #252]	; (8004c48 <xTaskIncrementTick+0x160>)
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	f000 fadf 	bl	8005110 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b52:	4b3e      	ldr	r3, [pc, #248]	; (8004c4c <xTaskIncrementTick+0x164>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d34e      	bcc.n	8004bfa <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b5c:	4b38      	ldr	r3, [pc, #224]	; (8004c40 <xTaskIncrementTick+0x158>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <xTaskIncrementTick+0x82>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <xTaskIncrementTick+0x84>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b70:	4b36      	ldr	r3, [pc, #216]	; (8004c4c <xTaskIncrementTick+0x164>)
 8004b72:	f04f 32ff 	mov.w	r2, #4294967295
 8004b76:	601a      	str	r2, [r3, #0]
					break;
 8004b78:	e03f      	b.n	8004bfa <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <xTaskIncrementTick+0x158>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d203      	bcs.n	8004b9a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b92:	4a2e      	ldr	r2, [pc, #184]	; (8004c4c <xTaskIncrementTick+0x164>)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6013      	str	r3, [r2, #0]
						break;
 8004b98:	e02f      	b.n	8004bfa <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe ff82 	bl	8003aa8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	3318      	adds	r3, #24
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fe ff79 	bl	8003aa8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bba:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <xTaskIncrementTick+0x168>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d903      	bls.n	8004bca <xTaskIncrementTick+0xe2>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <xTaskIncrementTick+0x168>)
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <xTaskIncrementTick+0x16c>)
 8004bd8:	441a      	add	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f7fe ff04 	bl	80039ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <xTaskIncrementTick+0x170>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d3b3      	bcc.n	8004b5c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bf8:	e7b0      	b.n	8004b5c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bfa:	4b17      	ldr	r3, [pc, #92]	; (8004c58 <xTaskIncrementTick+0x170>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	4914      	ldr	r1, [pc, #80]	; (8004c54 <xTaskIncrementTick+0x16c>)
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d907      	bls.n	8004c22 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004c12:	2301      	movs	r3, #1
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	e004      	b.n	8004c22 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004c18:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <xTaskIncrementTick+0x174>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	4a0f      	ldr	r2, [pc, #60]	; (8004c5c <xTaskIncrementTick+0x174>)
 8004c20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004c22:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <xTaskIncrementTick+0x178>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004c2e:	697b      	ldr	r3, [r7, #20]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000e2c 	.word	0x20000e2c
 8004c3c:	20000e08 	.word	0x20000e08
 8004c40:	20000dbc 	.word	0x20000dbc
 8004c44:	20000dc0 	.word	0x20000dc0
 8004c48:	20000e1c 	.word	0x20000e1c
 8004c4c:	20000e24 	.word	0x20000e24
 8004c50:	20000e0c 	.word	0x20000e0c
 8004c54:	20000934 	.word	0x20000934
 8004c58:	20000930 	.word	0x20000930
 8004c5c:	20000e14 	.word	0x20000e14
 8004c60:	20000e18 	.word	0x20000e18

08004c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <vTaskSwitchContext+0xb0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c72:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <vTaskSwitchContext+0xb4>)
 8004c74:	2201      	movs	r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c78:	e046      	b.n	8004d08 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004c7a:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <vTaskSwitchContext+0xb4>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c80:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <vTaskSwitchContext+0xb8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e010      	b.n	8004caa <vTaskSwitchContext+0x46>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	607b      	str	r3, [r7, #4]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <vTaskSwitchContext+0x3e>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	491d      	ldr	r1, [pc, #116]	; (8004d20 <vTaskSwitchContext+0xbc>)
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0e4      	beq.n	8004c88 <vTaskSwitchContext+0x24>
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <vTaskSwitchContext+0xbc>)
 8004cca:	4413      	add	r3, r2
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	3308      	adds	r3, #8
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d104      	bne.n	8004cee <vTaskSwitchContext+0x8a>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a0b      	ldr	r2, [pc, #44]	; (8004d24 <vTaskSwitchContext+0xc0>)
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4a08      	ldr	r2, [pc, #32]	; (8004d1c <vTaskSwitchContext+0xb8>)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <vTaskSwitchContext+0xc0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3354      	adds	r3, #84	; 0x54
 8004d04:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <vTaskSwitchContext+0xc4>)
 8004d06:	6013      	str	r3, [r2, #0]
}
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	20000e2c 	.word	0x20000e2c
 8004d18:	20000e18 	.word	0x20000e18
 8004d1c:	20000e0c 	.word	0x20000e0c
 8004d20:	20000934 	.word	0x20000934
 8004d24:	20000930 	.word	0x20000930
 8004d28:	20000010 	.word	0x20000010

08004d2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	60fb      	str	r3, [r7, #12]
}
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <vTaskPlaceOnEventList+0x44>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3318      	adds	r3, #24
 8004d58:	4619      	mov	r1, r3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7fe fe6b 	bl	8003a36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d60:	2101      	movs	r1, #1
 8004d62:	6838      	ldr	r0, [r7, #0]
 8004d64:	f000 fa86 	bl	8005274 <prvAddCurrentTaskToDelayedList>
}
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000930 	.word	0x20000930

08004d74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10a      	bne.n	8004d9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	617b      	str	r3, [r7, #20]
}
 8004d98:	bf00      	nop
 8004d9a:	e7fe      	b.n	8004d9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3318      	adds	r3, #24
 8004da2:	4619      	mov	r1, r3
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7fe fe22 	bl	80039ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004db0:	f04f 33ff 	mov.w	r3, #4294967295
 8004db4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	68b8      	ldr	r0, [r7, #8]
 8004dba:	f000 fa5b 	bl	8005274 <prvAddCurrentTaskToDelayedList>
	}
 8004dbe:	bf00      	nop
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000930 	.word	0x20000930

08004dcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10a      	bne.n	8004df8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	60fb      	str	r3, [r7, #12]
}
 8004df4:	bf00      	nop
 8004df6:	e7fe      	b.n	8004df6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	3318      	adds	r3, #24
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe fe53 	bl	8003aa8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <xTaskRemoveFromEventList+0xb0>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d11d      	bne.n	8004e46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fe4a 	bl	8003aa8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	4b19      	ldr	r3, [pc, #100]	; (8004e80 <xTaskRemoveFromEventList+0xb4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d903      	bls.n	8004e28 <xTaskRemoveFromEventList+0x5c>
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <xTaskRemoveFromEventList+0xb4>)
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4a13      	ldr	r2, [pc, #76]	; (8004e84 <xTaskRemoveFromEventList+0xb8>)
 8004e36:	441a      	add	r2, r3
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f7fe fdd5 	bl	80039ee <vListInsertEnd>
 8004e44:	e005      	b.n	8004e52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	3318      	adds	r3, #24
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	480e      	ldr	r0, [pc, #56]	; (8004e88 <xTaskRemoveFromEventList+0xbc>)
 8004e4e:	f7fe fdce 	bl	80039ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e56:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <xTaskRemoveFromEventList+0xc0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d905      	bls.n	8004e6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e64:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <xTaskRemoveFromEventList+0xc4>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	e001      	b.n	8004e70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004e70:	697b      	ldr	r3, [r7, #20]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000e2c 	.word	0x20000e2c
 8004e80:	20000e0c 	.word	0x20000e0c
 8004e84:	20000934 	.word	0x20000934
 8004e88:	20000dc4 	.word	0x20000dc4
 8004e8c:	20000930 	.word	0x20000930
 8004e90:	20000e18 	.word	0x20000e18

08004e94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <vTaskInternalSetTimeOutState+0x24>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <vTaskInternalSetTimeOutState+0x28>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	605a      	str	r2, [r3, #4]
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	20000e1c 	.word	0x20000e1c
 8004ebc:	20000e08 	.word	0x20000e08

08004ec0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	613b      	str	r3, [r7, #16]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	60fb      	str	r3, [r7, #12]
}
 8004efe:	bf00      	nop
 8004f00:	e7fe      	b.n	8004f00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004f02:	f000 fe47 	bl	8005b94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <xTaskCheckForTimeOut+0xbc>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d102      	bne.n	8004f26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e023      	b.n	8004f6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <xTaskCheckForTimeOut+0xc0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d007      	beq.n	8004f42 <xTaskCheckForTimeOut+0x82>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	e015      	b.n	8004f6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d20b      	bcs.n	8004f64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ff9b 	bl	8004e94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	e004      	b.n	8004f6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f6e:	f000 fe41 	bl	8005bf4 <vPortExitCritical>

	return xReturn;
 8004f72:	69fb      	ldr	r3, [r7, #28]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000e08 	.word	0x20000e08
 8004f80:	20000e1c 	.word	0x20000e1c

08004f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f88:	4b03      	ldr	r3, [pc, #12]	; (8004f98 <vTaskMissedYield+0x14>)
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	20000e18 	.word	0x20000e18

08004f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fa4:	f000 f852 	bl	800504c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <prvIdleTask+0x28>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d9f9      	bls.n	8004fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <prvIdleTask+0x2c>)
 8004fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fc0:	e7f0      	b.n	8004fa4 <prvIdleTask+0x8>
 8004fc2:	bf00      	nop
 8004fc4:	20000934 	.word	0x20000934
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e00c      	b.n	8004ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4a12      	ldr	r2, [pc, #72]	; (800502c <prvInitialiseTaskLists+0x60>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fcd4 	bl	8003994 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b37      	cmp	r3, #55	; 0x37
 8004ff6:	d9ef      	bls.n	8004fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ff8:	480d      	ldr	r0, [pc, #52]	; (8005030 <prvInitialiseTaskLists+0x64>)
 8004ffa:	f7fe fccb 	bl	8003994 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ffe:	480d      	ldr	r0, [pc, #52]	; (8005034 <prvInitialiseTaskLists+0x68>)
 8005000:	f7fe fcc8 	bl	8003994 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005004:	480c      	ldr	r0, [pc, #48]	; (8005038 <prvInitialiseTaskLists+0x6c>)
 8005006:	f7fe fcc5 	bl	8003994 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800500a:	480c      	ldr	r0, [pc, #48]	; (800503c <prvInitialiseTaskLists+0x70>)
 800500c:	f7fe fcc2 	bl	8003994 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005010:	480b      	ldr	r0, [pc, #44]	; (8005040 <prvInitialiseTaskLists+0x74>)
 8005012:	f7fe fcbf 	bl	8003994 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <prvInitialiseTaskLists+0x78>)
 8005018:	4a05      	ldr	r2, [pc, #20]	; (8005030 <prvInitialiseTaskLists+0x64>)
 800501a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <prvInitialiseTaskLists+0x7c>)
 800501e:	4a05      	ldr	r2, [pc, #20]	; (8005034 <prvInitialiseTaskLists+0x68>)
 8005020:	601a      	str	r2, [r3, #0]
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000934 	.word	0x20000934
 8005030:	20000d94 	.word	0x20000d94
 8005034:	20000da8 	.word	0x20000da8
 8005038:	20000dc4 	.word	0x20000dc4
 800503c:	20000dd8 	.word	0x20000dd8
 8005040:	20000df0 	.word	0x20000df0
 8005044:	20000dbc 	.word	0x20000dbc
 8005048:	20000dc0 	.word	0x20000dc0

0800504c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005052:	e019      	b.n	8005088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005054:	f000 fd9e 	bl	8005b94 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005058:	4b10      	ldr	r3, [pc, #64]	; (800509c <prvCheckTasksWaitingTermination+0x50>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe fd1f 	bl	8003aa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <prvCheckTasksWaitingTermination+0x54>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3b01      	subs	r3, #1
 8005070:	4a0b      	ldr	r2, [pc, #44]	; (80050a0 <prvCheckTasksWaitingTermination+0x54>)
 8005072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005074:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3b01      	subs	r3, #1
 800507a:	4a0a      	ldr	r2, [pc, #40]	; (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 800507c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800507e:	f000 fdb9 	bl	8005bf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f810 	bl	80050a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005088:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e1      	bne.n	8005054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000dd8 	.word	0x20000dd8
 80050a0:	20000e04 	.word	0x20000e04
 80050a4:	20000dec 	.word	0x20000dec

080050a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3354      	adds	r3, #84	; 0x54
 80050b4:	4618      	mov	r0, r3
 80050b6:	f001 f8b3 	bl	8006220 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d108      	bne.n	80050d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 ff49 	bl	8005f60 <vPortFree>
				vPortFree( pxTCB );
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 ff46 	bl	8005f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050d4:	e018      	b.n	8005108 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d103      	bne.n	80050e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 ff3d 	bl	8005f60 <vPortFree>
	}
 80050e6:	e00f      	b.n	8005108 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d00a      	beq.n	8005108 <prvDeleteTCB+0x60>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	60fb      	str	r3, [r7, #12]
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <prvDeleteTCB+0x5e>
	}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <prvResetNextTaskUnblockTime+0x44>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <prvResetNextTaskUnblockTime+0x14>
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <prvResetNextTaskUnblockTime+0x16>
 8005124:	2300      	movs	r3, #0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d004      	beq.n	8005134 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800512a:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <prvResetNextTaskUnblockTime+0x48>)
 800512c:	f04f 32ff 	mov.w	r2, #4294967295
 8005130:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005132:	e008      	b.n	8005146 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005134:	4b07      	ldr	r3, [pc, #28]	; (8005154 <prvResetNextTaskUnblockTime+0x44>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	4a05      	ldr	r2, [pc, #20]	; (8005158 <prvResetNextTaskUnblockTime+0x48>)
 8005144:	6013      	str	r3, [r2, #0]
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	20000dbc 	.word	0x20000dbc
 8005158:	20000e24 	.word	0x20000e24

0800515c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <xTaskGetSchedulerState+0x34>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800516a:	2301      	movs	r3, #1
 800516c:	607b      	str	r3, [r7, #4]
 800516e:	e008      	b.n	8005182 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005170:	4b08      	ldr	r3, [pc, #32]	; (8005194 <xTaskGetSchedulerState+0x38>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d102      	bne.n	800517e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005178:	2302      	movs	r3, #2
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	e001      	b.n	8005182 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800517e:	2300      	movs	r3, #0
 8005180:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005182:	687b      	ldr	r3, [r7, #4]
	}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	20000e10 	.word	0x20000e10
 8005194:	20000e2c 	.word	0x20000e2c

08005198 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d056      	beq.n	800525c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051ae:	4b2e      	ldr	r3, [pc, #184]	; (8005268 <xTaskPriorityDisinherit+0xd0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d00a      	beq.n	80051ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	60fb      	str	r3, [r7, #12]
}
 80051ca:	bf00      	nop
 80051cc:	e7fe      	b.n	80051cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	60bb      	str	r3, [r7, #8]
}
 80051e8:	bf00      	nop
 80051ea:	e7fe      	b.n	80051ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f0:	1e5a      	subs	r2, r3, #1
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fe:	429a      	cmp	r2, r3
 8005200:	d02c      	beq.n	800525c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005206:	2b00      	cmp	r3, #0
 8005208:	d128      	bne.n	800525c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	3304      	adds	r3, #4
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe fc4a 	bl	8003aa8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	4b0f      	ldr	r3, [pc, #60]	; (800526c <xTaskPriorityDisinherit+0xd4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d903      	bls.n	800523c <xTaskPriorityDisinherit+0xa4>
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	4a0c      	ldr	r2, [pc, #48]	; (800526c <xTaskPriorityDisinherit+0xd4>)
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4a09      	ldr	r2, [pc, #36]	; (8005270 <xTaskPriorityDisinherit+0xd8>)
 800524a:	441a      	add	r2, r3
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	3304      	adds	r3, #4
 8005250:	4619      	mov	r1, r3
 8005252:	4610      	mov	r0, r2
 8005254:	f7fe fbcb 	bl	80039ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800525c:	697b      	ldr	r3, [r7, #20]
	}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000930 	.word	0x20000930
 800526c:	20000e0c 	.word	0x20000e0c
 8005270:	20000934 	.word	0x20000934

08005274 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800527e:	4b21      	ldr	r3, [pc, #132]	; (8005304 <prvAddCurrentTaskToDelayedList+0x90>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005284:	4b20      	ldr	r3, [pc, #128]	; (8005308 <prvAddCurrentTaskToDelayedList+0x94>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3304      	adds	r3, #4
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe fc0c 	bl	8003aa8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d10a      	bne.n	80052ae <prvAddCurrentTaskToDelayedList+0x3a>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d007      	beq.n	80052ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800529e:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <prvAddCurrentTaskToDelayedList+0x94>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4619      	mov	r1, r3
 80052a6:	4819      	ldr	r0, [pc, #100]	; (800530c <prvAddCurrentTaskToDelayedList+0x98>)
 80052a8:	f7fe fba1 	bl	80039ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052ac:	e026      	b.n	80052fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4413      	add	r3, r2
 80052b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <prvAddCurrentTaskToDelayedList+0x94>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d209      	bcs.n	80052da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052c6:	4b12      	ldr	r3, [pc, #72]	; (8005310 <prvAddCurrentTaskToDelayedList+0x9c>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b0f      	ldr	r3, [pc, #60]	; (8005308 <prvAddCurrentTaskToDelayedList+0x94>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3304      	adds	r3, #4
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f7fe fbaf 	bl	8003a36 <vListInsert>
}
 80052d8:	e010      	b.n	80052fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052da:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <prvAddCurrentTaskToDelayedList+0xa0>)
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <prvAddCurrentTaskToDelayedList+0x94>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f7fe fba5 	bl	8003a36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d202      	bcs.n	80052fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80052f6:	4a08      	ldr	r2, [pc, #32]	; (8005318 <prvAddCurrentTaskToDelayedList+0xa4>)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6013      	str	r3, [r2, #0]
}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000e08 	.word	0x20000e08
 8005308:	20000930 	.word	0x20000930
 800530c:	20000df0 	.word	0x20000df0
 8005310:	20000dc0 	.word	0x20000dc0
 8005314:	20000dbc 	.word	0x20000dbc
 8005318:	20000e24 	.word	0x20000e24

0800531c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005326:	f000 facb 	bl	80058c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800532a:	4b1c      	ldr	r3, [pc, #112]	; (800539c <xTimerCreateTimerTask+0x80>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d021      	beq.n	8005376 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005332:	2300      	movs	r3, #0
 8005334:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800533a:	1d3a      	adds	r2, r7, #4
 800533c:	f107 0108 	add.w	r1, r7, #8
 8005340:	f107 030c 	add.w	r3, r7, #12
 8005344:	4618      	mov	r0, r3
 8005346:	f7fe fb0b 	bl	8003960 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	9202      	str	r2, [sp, #8]
 8005352:	9301      	str	r3, [sp, #4]
 8005354:	2302      	movs	r3, #2
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	2300      	movs	r3, #0
 800535a:	460a      	mov	r2, r1
 800535c:	4910      	ldr	r1, [pc, #64]	; (80053a0 <xTimerCreateTimerTask+0x84>)
 800535e:	4811      	ldr	r0, [pc, #68]	; (80053a4 <xTimerCreateTimerTask+0x88>)
 8005360:	f7ff f8b2 	bl	80044c8 <xTaskCreateStatic>
 8005364:	4603      	mov	r3, r0
 8005366:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <xTimerCreateTimerTask+0x8c>)
 8005368:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800536a:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <xTimerCreateTimerTask+0x8c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005372:	2301      	movs	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10a      	bne.n	8005392 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800537c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005380:	f383 8811 	msr	BASEPRI, r3
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	613b      	str	r3, [r7, #16]
}
 800538e:	bf00      	nop
 8005390:	e7fe      	b.n	8005390 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005392:	697b      	ldr	r3, [r7, #20]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000e60 	.word	0x20000e60
 80053a0:	080063c0 	.word	0x080063c0
 80053a4:	080054c9 	.word	0x080054c9
 80053a8:	20000e64 	.word	0x20000e64

080053ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	; 0x28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <xTimerGenericCommand+0x2e>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	623b      	str	r3, [r7, #32]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80053da:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <xTimerGenericCommand+0x98>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d02a      	beq.n	8005438 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b05      	cmp	r3, #5
 80053f2:	dc18      	bgt.n	8005426 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80053f4:	f7ff feb2 	bl	800515c <xTaskGetSchedulerState>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d109      	bne.n	8005412 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80053fe:	4b11      	ldr	r3, [pc, #68]	; (8005444 <xTimerGenericCommand+0x98>)
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	f107 0110 	add.w	r1, r7, #16
 8005406:	2300      	movs	r3, #0
 8005408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540a:	f7fe fc79 	bl	8003d00 <xQueueGenericSend>
 800540e:	6278      	str	r0, [r7, #36]	; 0x24
 8005410:	e012      	b.n	8005438 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005412:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <xTimerGenericCommand+0x98>)
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	f107 0110 	add.w	r1, r7, #16
 800541a:	2300      	movs	r3, #0
 800541c:	2200      	movs	r2, #0
 800541e:	f7fe fc6f 	bl	8003d00 <xQueueGenericSend>
 8005422:	6278      	str	r0, [r7, #36]	; 0x24
 8005424:	e008      	b.n	8005438 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005426:	4b07      	ldr	r3, [pc, #28]	; (8005444 <xTimerGenericCommand+0x98>)
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	f107 0110 	add.w	r1, r7, #16
 800542e:	2300      	movs	r3, #0
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	f7fe fd63 	bl	8003efc <xQueueGenericSendFromISR>
 8005436:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800543a:	4618      	mov	r0, r3
 800543c:	3728      	adds	r7, #40	; 0x28
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000e60 	.word	0x20000e60

08005448 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af02      	add	r7, sp, #8
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005452:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <prvProcessExpiredTimer+0x7c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	3304      	adds	r3, #4
 8005460:	4618      	mov	r0, r3
 8005462:	f7fe fb21 	bl	8003aa8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d122      	bne.n	80054b4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	18d1      	adds	r1, r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	6978      	ldr	r0, [r7, #20]
 800547c:	f000 f8c8 	bl	8005610 <prvInsertTimerInActiveList>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d016      	beq.n	80054b4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005486:	2300      	movs	r3, #0
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	2300      	movs	r3, #0
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	2100      	movs	r1, #0
 8005490:	6978      	ldr	r0, [r7, #20]
 8005492:	f7ff ff8b 	bl	80053ac <xTimerGenericCommand>
 8005496:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	60fb      	str	r3, [r7, #12]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	6978      	ldr	r0, [r7, #20]
 80054ba:	4798      	blx	r3
}
 80054bc:	bf00      	nop
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000e58 	.word	0x20000e58

080054c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054d0:	f107 0308 	add.w	r3, r7, #8
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f857 	bl	8005588 <prvGetNextExpireTime>
 80054da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4619      	mov	r1, r3
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f000 f803 	bl	80054ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80054e6:	f000 f8d5 	bl	8005694 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80054ea:	e7f1      	b.n	80054d0 <prvTimerTask+0x8>

080054ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80054f6:	f7ff fa3b 	bl	8004970 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054fa:	f107 0308 	add.w	r3, r7, #8
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f866 	bl	80055d0 <prvSampleTimeNow>
 8005504:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d130      	bne.n	800556e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10a      	bne.n	8005528 <prvProcessTimerOrBlockTask+0x3c>
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	429a      	cmp	r2, r3
 8005518:	d806      	bhi.n	8005528 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800551a:	f7ff fa37 	bl	800498c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800551e:	68f9      	ldr	r1, [r7, #12]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ff91 	bl	8005448 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005526:	e024      	b.n	8005572 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d008      	beq.n	8005540 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <prvProcessTimerOrBlockTask+0x90>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	bf0c      	ite	eq
 8005538:	2301      	moveq	r3, #1
 800553a:	2300      	movne	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005540:	4b0f      	ldr	r3, [pc, #60]	; (8005580 <prvProcessTimerOrBlockTask+0x94>)
 8005542:	6818      	ldr	r0, [r3, #0]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	4619      	mov	r1, r3
 800554e:	f7fe ff87 	bl	8004460 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005552:	f7ff fa1b 	bl	800498c <xTaskResumeAll>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <prvProcessTimerOrBlockTask+0x98>)
 800555e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	f3bf 8f6f 	isb	sy
}
 800556c:	e001      	b.n	8005572 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800556e:	f7ff fa0d 	bl	800498c <xTaskResumeAll>
}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000e5c 	.word	0x20000e5c
 8005580:	20000e60 	.word	0x20000e60
 8005584:	e000ed04 	.word	0xe000ed04

08005588 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005590:	4b0e      	ldr	r3, [pc, #56]	; (80055cc <prvGetNextExpireTime+0x44>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf0c      	ite	eq
 800559a:	2301      	moveq	r3, #1
 800559c:	2300      	movne	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d105      	bne.n	80055ba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <prvGetNextExpireTime+0x44>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e001      	b.n	80055be <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80055be:	68fb      	ldr	r3, [r7, #12]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	20000e58 	.word	0x20000e58

080055d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80055d8:	f7ff fa76 	bl	8004ac8 <xTaskGetTickCount>
 80055dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80055de:	4b0b      	ldr	r3, [pc, #44]	; (800560c <prvSampleTimeNow+0x3c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d205      	bcs.n	80055f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80055e8:	f000 f908 	bl	80057fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	e002      	b.n	80055fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80055fa:	4a04      	ldr	r2, [pc, #16]	; (800560c <prvSampleTimeNow+0x3c>)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005600:	68fb      	ldr	r3, [r7, #12]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000e68 	.word	0x20000e68

08005610 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	429a      	cmp	r2, r3
 8005634:	d812      	bhi.n	800565c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	1ad2      	subs	r2, r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	429a      	cmp	r2, r3
 8005642:	d302      	bcc.n	800564a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005644:	2301      	movs	r3, #1
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	e01b      	b.n	8005682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800564a:	4b10      	ldr	r3, [pc, #64]	; (800568c <prvInsertTimerInActiveList+0x7c>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	3304      	adds	r3, #4
 8005652:	4619      	mov	r1, r3
 8005654:	4610      	mov	r0, r2
 8005656:	f7fe f9ee 	bl	8003a36 <vListInsert>
 800565a:	e012      	b.n	8005682 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	429a      	cmp	r2, r3
 8005662:	d206      	bcs.n	8005672 <prvInsertTimerInActiveList+0x62>
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d302      	bcc.n	8005672 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800566c:	2301      	movs	r3, #1
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	e007      	b.n	8005682 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005672:	4b07      	ldr	r3, [pc, #28]	; (8005690 <prvInsertTimerInActiveList+0x80>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	3304      	adds	r3, #4
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f7fe f9da 	bl	8003a36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005682:	697b      	ldr	r3, [r7, #20]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000e5c 	.word	0x20000e5c
 8005690:	20000e58 	.word	0x20000e58

08005694 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08e      	sub	sp, #56	; 0x38
 8005698:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800569a:	e09d      	b.n	80057d8 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	da18      	bge.n	80056d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056a2:	1d3b      	adds	r3, r7, #4
 80056a4:	3304      	adds	r3, #4
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80056a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	61fb      	str	r3, [r7, #28]
}
 80056c0:	bf00      	nop
 80056c2:	e7fe      	b.n	80056c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ca:	6850      	ldr	r0, [r2, #4]
 80056cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ce:	6892      	ldr	r2, [r2, #8]
 80056d0:	4611      	mov	r1, r2
 80056d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	db7d      	blt.n	80057d6 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	3304      	adds	r3, #4
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fe f9dc 	bl	8003aa8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056f0:	463b      	mov	r3, r7
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff ff6c 	bl	80055d0 <prvSampleTimeNow>
 80056f8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b09      	cmp	r3, #9
 80056fe:	d86b      	bhi.n	80057d8 <prvProcessReceivedCommands+0x144>
 8005700:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <prvProcessReceivedCommands+0x74>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	08005731 	.word	0x08005731
 800570c:	08005731 	.word	0x08005731
 8005710:	08005731 	.word	0x08005731
 8005714:	080057d9 	.word	0x080057d9
 8005718:	0800578d 	.word	0x0800578d
 800571c:	080057c5 	.word	0x080057c5
 8005720:	08005731 	.word	0x08005731
 8005724:	08005731 	.word	0x08005731
 8005728:	080057d9 	.word	0x080057d9
 800572c:	0800578d 	.word	0x0800578d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	18d1      	adds	r1, r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573e:	f7ff ff67 	bl	8005610 <prvInsertTimerInActiveList>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d047      	beq.n	80057d8 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800574e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d13f      	bne.n	80057d8 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	441a      	add	r2, r3
 8005760:	2300      	movs	r3, #0
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	2100      	movs	r1, #0
 8005768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800576a:	f7ff fe1f 	bl	80053ac <xTimerGenericCommand>
 800576e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d130      	bne.n	80057d8 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	f383 8811 	msr	BASEPRI, r3
 800577e:	f3bf 8f6f 	isb	sy
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	61bb      	str	r3, [r7, #24]
}
 8005788:	bf00      	nop
 800578a:	e7fe      	b.n	800578a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	617b      	str	r3, [r7, #20]
}
 80057ac:	bf00      	nop
 80057ae:	e7fe      	b.n	80057ae <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	699a      	ldr	r2, [r3, #24]
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	18d1      	adds	r1, r2, r3
 80057b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057be:	f7ff ff27 	bl	8005610 <prvInsertTimerInActiveList>
					break;
 80057c2:	e009      	b.n	80057d8 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80057ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d0:	f000 fbc6 	bl	8005f60 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80057d4:	e000      	b.n	80057d8 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80057d6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057d8:	4b07      	ldr	r3, [pc, #28]	; (80057f8 <prvProcessReceivedCommands+0x164>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	1d39      	adds	r1, r7, #4
 80057de:	2200      	movs	r2, #0
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe fc23 	bl	800402c <xQueueReceive>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f47f af57 	bne.w	800569c <prvProcessReceivedCommands+0x8>
	}
}
 80057ee:	bf00      	nop
 80057f0:	bf00      	nop
 80057f2:	3730      	adds	r7, #48	; 0x30
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000e60 	.word	0x20000e60

080057fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005802:	e045      	b.n	8005890 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005804:	4b2c      	ldr	r3, [pc, #176]	; (80058b8 <prvSwitchTimerLists+0xbc>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800580e:	4b2a      	ldr	r3, [pc, #168]	; (80058b8 <prvSwitchTimerLists+0xbc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3304      	adds	r3, #4
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe f943 	bl	8003aa8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d12e      	bne.n	8005890 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4413      	add	r3, r2
 800583a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	429a      	cmp	r2, r3
 8005842:	d90e      	bls.n	8005862 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <prvSwitchTimerLists+0xbc>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3304      	adds	r3, #4
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f7fe f8eb 	bl	8003a36 <vListInsert>
 8005860:	e016      	b.n	8005890 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005862:	2300      	movs	r3, #0
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	2300      	movs	r3, #0
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	2100      	movs	r1, #0
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f7ff fd9d 	bl	80053ac <xTimerGenericCommand>
 8005872:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10a      	bne.n	8005890 <prvSwitchTimerLists+0x94>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	603b      	str	r3, [r7, #0]
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005890:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <prvSwitchTimerLists+0xbc>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1b4      	bne.n	8005804 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <prvSwitchTimerLists+0xbc>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <prvSwitchTimerLists+0xc0>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a04      	ldr	r2, [pc, #16]	; (80058b8 <prvSwitchTimerLists+0xbc>)
 80058a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80058a8:	4a04      	ldr	r2, [pc, #16]	; (80058bc <prvSwitchTimerLists+0xc0>)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	6013      	str	r3, [r2, #0]
}
 80058ae:	bf00      	nop
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000e58 	.word	0x20000e58
 80058bc:	20000e5c 	.word	0x20000e5c

080058c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80058c6:	f000 f965 	bl	8005b94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80058ca:	4b15      	ldr	r3, [pc, #84]	; (8005920 <prvCheckForValidListAndQueue+0x60>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d120      	bne.n	8005914 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80058d2:	4814      	ldr	r0, [pc, #80]	; (8005924 <prvCheckForValidListAndQueue+0x64>)
 80058d4:	f7fe f85e 	bl	8003994 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80058d8:	4813      	ldr	r0, [pc, #76]	; (8005928 <prvCheckForValidListAndQueue+0x68>)
 80058da:	f7fe f85b 	bl	8003994 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80058de:	4b13      	ldr	r3, [pc, #76]	; (800592c <prvCheckForValidListAndQueue+0x6c>)
 80058e0:	4a10      	ldr	r2, [pc, #64]	; (8005924 <prvCheckForValidListAndQueue+0x64>)
 80058e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058e4:	4b12      	ldr	r3, [pc, #72]	; (8005930 <prvCheckForValidListAndQueue+0x70>)
 80058e6:	4a10      	ldr	r2, [pc, #64]	; (8005928 <prvCheckForValidListAndQueue+0x68>)
 80058e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058ea:	2300      	movs	r3, #0
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	4b11      	ldr	r3, [pc, #68]	; (8005934 <prvCheckForValidListAndQueue+0x74>)
 80058f0:	4a11      	ldr	r2, [pc, #68]	; (8005938 <prvCheckForValidListAndQueue+0x78>)
 80058f2:	2110      	movs	r1, #16
 80058f4:	200a      	movs	r0, #10
 80058f6:	f7fe f969 	bl	8003bcc <xQueueGenericCreateStatic>
 80058fa:	4603      	mov	r3, r0
 80058fc:	4a08      	ldr	r2, [pc, #32]	; (8005920 <prvCheckForValidListAndQueue+0x60>)
 80058fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005900:	4b07      	ldr	r3, [pc, #28]	; (8005920 <prvCheckForValidListAndQueue+0x60>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <prvCheckForValidListAndQueue+0x60>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	490b      	ldr	r1, [pc, #44]	; (800593c <prvCheckForValidListAndQueue+0x7c>)
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fd7c 	bl	800440c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005914:	f000 f96e 	bl	8005bf4 <vPortExitCritical>
}
 8005918:	bf00      	nop
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	20000e60 	.word	0x20000e60
 8005924:	20000e30 	.word	0x20000e30
 8005928:	20000e44 	.word	0x20000e44
 800592c:	20000e58 	.word	0x20000e58
 8005930:	20000e5c 	.word	0x20000e5c
 8005934:	20000f0c 	.word	0x20000f0c
 8005938:	20000e6c 	.word	0x20000e6c
 800593c:	080063c8 	.word	0x080063c8

08005940 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3b04      	subs	r3, #4
 8005950:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3b04      	subs	r3, #4
 800595e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	f023 0201 	bic.w	r2, r3, #1
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3b04      	subs	r3, #4
 800596e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005970:	4a0c      	ldr	r2, [pc, #48]	; (80059a4 <pxPortInitialiseStack+0x64>)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	3b14      	subs	r3, #20
 800597a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3b04      	subs	r3, #4
 8005986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f06f 0202 	mvn.w	r2, #2
 800598e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3b20      	subs	r3, #32
 8005994:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	080059a9 	.word	0x080059a9

080059a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059b2:	4b12      	ldr	r3, [pc, #72]	; (80059fc <prvTaskExitError+0x54>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	d00a      	beq.n	80059d2 <prvTaskExitError+0x2a>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	60fb      	str	r3, [r7, #12]
}
 80059ce:	bf00      	nop
 80059d0:	e7fe      	b.n	80059d0 <prvTaskExitError+0x28>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	60bb      	str	r3, [r7, #8]
}
 80059e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059e6:	bf00      	nop
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0fc      	beq.n	80059e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059ee:	bf00      	nop
 80059f0:	bf00      	nop
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	2000000c 	.word	0x2000000c

08005a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a00:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <pxCurrentTCBConst2>)
 8005a02:	6819      	ldr	r1, [r3, #0]
 8005a04:	6808      	ldr	r0, [r1, #0]
 8005a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0a:	f380 8809 	msr	PSP, r0
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f04f 0000 	mov.w	r0, #0
 8005a16:	f380 8811 	msr	BASEPRI, r0
 8005a1a:	4770      	bx	lr
 8005a1c:	f3af 8000 	nop.w

08005a20 <pxCurrentTCBConst2>:
 8005a20:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a24:	bf00      	nop
 8005a26:	bf00      	nop

08005a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a28:	4808      	ldr	r0, [pc, #32]	; (8005a4c <prvPortStartFirstTask+0x24>)
 8005a2a:	6800      	ldr	r0, [r0, #0]
 8005a2c:	6800      	ldr	r0, [r0, #0]
 8005a2e:	f380 8808 	msr	MSP, r0
 8005a32:	f04f 0000 	mov.w	r0, #0
 8005a36:	f380 8814 	msr	CONTROL, r0
 8005a3a:	b662      	cpsie	i
 8005a3c:	b661      	cpsie	f
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	df00      	svc	0
 8005a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a4a:	bf00      	nop
 8005a4c:	e000ed08 	.word	0xe000ed08

08005a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a56:	4b46      	ldr	r3, [pc, #280]	; (8005b70 <xPortStartScheduler+0x120>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a46      	ldr	r2, [pc, #280]	; (8005b74 <xPortStartScheduler+0x124>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d10a      	bne.n	8005a76 <xPortStartScheduler+0x26>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	613b      	str	r3, [r7, #16]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a76:	4b3e      	ldr	r3, [pc, #248]	; (8005b70 <xPortStartScheduler+0x120>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a3f      	ldr	r2, [pc, #252]	; (8005b78 <xPortStartScheduler+0x128>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d10a      	bne.n	8005a96 <xPortStartScheduler+0x46>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	60fb      	str	r3, [r7, #12]
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a96:	4b39      	ldr	r3, [pc, #228]	; (8005b7c <xPortStartScheduler+0x12c>)
 8005a98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	22ff      	movs	r2, #255	; 0xff
 8005aa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	4b31      	ldr	r3, [pc, #196]	; (8005b80 <xPortStartScheduler+0x130>)
 8005abc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005abe:	4b31      	ldr	r3, [pc, #196]	; (8005b84 <xPortStartScheduler+0x134>)
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ac4:	e009      	b.n	8005ada <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ac6:	4b2f      	ldr	r3, [pc, #188]	; (8005b84 <xPortStartScheduler+0x134>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	4a2d      	ldr	r2, [pc, #180]	; (8005b84 <xPortStartScheduler+0x134>)
 8005ace:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae2:	2b80      	cmp	r3, #128	; 0x80
 8005ae4:	d0ef      	beq.n	8005ac6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ae6:	4b27      	ldr	r3, [pc, #156]	; (8005b84 <xPortStartScheduler+0x134>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f1c3 0307 	rsb	r3, r3, #7
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d00a      	beq.n	8005b08 <xPortStartScheduler+0xb8>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	60bb      	str	r3, [r7, #8]
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b08:	4b1e      	ldr	r3, [pc, #120]	; (8005b84 <xPortStartScheduler+0x134>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	021b      	lsls	r3, r3, #8
 8005b0e:	4a1d      	ldr	r2, [pc, #116]	; (8005b84 <xPortStartScheduler+0x134>)
 8005b10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b12:	4b1c      	ldr	r3, [pc, #112]	; (8005b84 <xPortStartScheduler+0x134>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b1a:	4a1a      	ldr	r2, [pc, #104]	; (8005b84 <xPortStartScheduler+0x134>)
 8005b1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b26:	4b18      	ldr	r3, [pc, #96]	; (8005b88 <xPortStartScheduler+0x138>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <xPortStartScheduler+0x138>)
 8005b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <xPortStartScheduler+0x138>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a14      	ldr	r2, [pc, #80]	; (8005b88 <xPortStartScheduler+0x138>)
 8005b38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b3e:	f000 f8dd 	bl	8005cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b42:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <xPortStartScheduler+0x13c>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b48:	f000 f8fc 	bl	8005d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b4c:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <xPortStartScheduler+0x140>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a0f      	ldr	r2, [pc, #60]	; (8005b90 <xPortStartScheduler+0x140>)
 8005b52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b58:	f7ff ff66 	bl	8005a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b5c:	f7ff f882 	bl	8004c64 <vTaskSwitchContext>
	prvTaskExitError();
 8005b60:	f7ff ff22 	bl	80059a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	e000ed00 	.word	0xe000ed00
 8005b74:	410fc271 	.word	0x410fc271
 8005b78:	410fc270 	.word	0x410fc270
 8005b7c:	e000e400 	.word	0xe000e400
 8005b80:	20000f5c 	.word	0x20000f5c
 8005b84:	20000f60 	.word	0x20000f60
 8005b88:	e000ed20 	.word	0xe000ed20
 8005b8c:	2000000c 	.word	0x2000000c
 8005b90:	e000ef34 	.word	0xe000ef34

08005b94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	607b      	str	r3, [r7, #4]
}
 8005bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bae:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <vPortEnterCritical+0x58>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	4a0d      	ldr	r2, [pc, #52]	; (8005bec <vPortEnterCritical+0x58>)
 8005bb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005bb8:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <vPortEnterCritical+0x58>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d10f      	bne.n	8005be0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <vPortEnterCritical+0x5c>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	603b      	str	r3, [r7, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <vPortEnterCritical+0x4a>
	}
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	2000000c 	.word	0x2000000c
 8005bf0:	e000ed04 	.word	0xe000ed04

08005bf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bfa:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <vPortExitCritical+0x50>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10a      	bne.n	8005c18 <vPortExitCritical+0x24>
	__asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	607b      	str	r3, [r7, #4]
}
 8005c14:	bf00      	nop
 8005c16:	e7fe      	b.n	8005c16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <vPortExitCritical+0x50>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	4a09      	ldr	r2, [pc, #36]	; (8005c44 <vPortExitCritical+0x50>)
 8005c20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c22:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <vPortExitCritical+0x50>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d105      	bne.n	8005c36 <vPortExitCritical+0x42>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	f383 8811 	msr	BASEPRI, r3
}
 8005c34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	2000000c 	.word	0x2000000c
	...

08005c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c50:	f3ef 8009 	mrs	r0, PSP
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <pxCurrentTCBConst>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	f01e 0f10 	tst.w	lr, #16
 8005c60:	bf08      	it	eq
 8005c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c6a:	6010      	str	r0, [r2, #0]
 8005c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c74:	f380 8811 	msr	BASEPRI, r0
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f7fe fff0 	bl	8004c64 <vTaskSwitchContext>
 8005c84:	f04f 0000 	mov.w	r0, #0
 8005c88:	f380 8811 	msr	BASEPRI, r0
 8005c8c:	bc09      	pop	{r0, r3}
 8005c8e:	6819      	ldr	r1, [r3, #0]
 8005c90:	6808      	ldr	r0, [r1, #0]
 8005c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c96:	f01e 0f10 	tst.w	lr, #16
 8005c9a:	bf08      	it	eq
 8005c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ca0:	f380 8809 	msr	PSP, r0
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	f3af 8000 	nop.w

08005cb0 <pxCurrentTCBConst>:
 8005cb0:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop

08005cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	607b      	str	r3, [r7, #4]
}
 8005cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cd2:	f7fe ff09 	bl	8004ae8 <xTaskIncrementTick>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <SysTick_Handler+0x40>)
 8005cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	f383 8811 	msr	BASEPRI, r3
}
 8005cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	e000ed04 	.word	0xe000ed04

08005cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <vPortSetupTimerInterrupt+0x34>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d06:	4b0b      	ldr	r3, [pc, #44]	; (8005d34 <vPortSetupTimerInterrupt+0x38>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d0c:	4b0a      	ldr	r3, [pc, #40]	; (8005d38 <vPortSetupTimerInterrupt+0x3c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a0a      	ldr	r2, [pc, #40]	; (8005d3c <vPortSetupTimerInterrupt+0x40>)
 8005d12:	fba2 2303 	umull	r2, r3, r2, r3
 8005d16:	099b      	lsrs	r3, r3, #6
 8005d18:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <vPortSetupTimerInterrupt+0x44>)
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d1e:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <vPortSetupTimerInterrupt+0x34>)
 8005d20:	2207      	movs	r2, #7
 8005d22:	601a      	str	r2, [r3, #0]
}
 8005d24:	bf00      	nop
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	e000e010 	.word	0xe000e010
 8005d34:	e000e018 	.word	0xe000e018
 8005d38:	20000000 	.word	0x20000000
 8005d3c:	10624dd3 	.word	0x10624dd3
 8005d40:	e000e014 	.word	0xe000e014

08005d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d54 <vPortEnableVFP+0x10>
 8005d48:	6801      	ldr	r1, [r0, #0]
 8005d4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d4e:	6001      	str	r1, [r0, #0]
 8005d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d52:	bf00      	nop
 8005d54:	e000ed88 	.word	0xe000ed88

08005d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d5e:	f3ef 8305 	mrs	r3, IPSR
 8005d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b0f      	cmp	r3, #15
 8005d68:	d914      	bls.n	8005d94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d6a:	4a17      	ldr	r2, [pc, #92]	; (8005dc8 <vPortValidateInterruptPriority+0x70>)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d74:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <vPortValidateInterruptPriority+0x74>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	7afa      	ldrb	r2, [r7, #11]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d20a      	bcs.n	8005d94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	607b      	str	r3, [r7, #4]
}
 8005d90:	bf00      	nop
 8005d92:	e7fe      	b.n	8005d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d94:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <vPortValidateInterruptPriority+0x78>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005d9c:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <vPortValidateInterruptPriority+0x7c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d90a      	bls.n	8005dba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	603b      	str	r3, [r7, #0]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <vPortValidateInterruptPriority+0x60>
	}
 8005dba:	bf00      	nop
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
 8005dc6:	bf00      	nop
 8005dc8:	e000e3f0 	.word	0xe000e3f0
 8005dcc:	20000f5c 	.word	0x20000f5c
 8005dd0:	e000ed0c 	.word	0xe000ed0c
 8005dd4:	20000f60 	.word	0x20000f60

08005dd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08a      	sub	sp, #40	; 0x28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005de4:	f7fe fdc4 	bl	8004970 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005de8:	4b58      	ldr	r3, [pc, #352]	; (8005f4c <pvPortMalloc+0x174>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005df0:	f000 f910 	bl	8006014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005df4:	4b56      	ldr	r3, [pc, #344]	; (8005f50 <pvPortMalloc+0x178>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f040 808e 	bne.w	8005f1e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01d      	beq.n	8005e44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005e08:	2208      	movs	r2, #8
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d014      	beq.n	8005e44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f023 0307 	bic.w	r3, r3, #7
 8005e20:	3308      	adds	r3, #8
 8005e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00a      	beq.n	8005e44 <pvPortMalloc+0x6c>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	617b      	str	r3, [r7, #20]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d069      	beq.n	8005f1e <pvPortMalloc+0x146>
 8005e4a:	4b42      	ldr	r3, [pc, #264]	; (8005f54 <pvPortMalloc+0x17c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d864      	bhi.n	8005f1e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e54:	4b40      	ldr	r3, [pc, #256]	; (8005f58 <pvPortMalloc+0x180>)
 8005e56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e58:	4b3f      	ldr	r3, [pc, #252]	; (8005f58 <pvPortMalloc+0x180>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e5e:	e004      	b.n	8005e6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d903      	bls.n	8005e7c <pvPortMalloc+0xa4>
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1f1      	bne.n	8005e60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e7c:	4b33      	ldr	r3, [pc, #204]	; (8005f4c <pvPortMalloc+0x174>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d04b      	beq.n	8005f1e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2208      	movs	r2, #8
 8005e8c:	4413      	add	r3, r2
 8005e8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d91f      	bls.n	8005ee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4413      	add	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <pvPortMalloc+0xf8>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	613b      	str	r3, [r7, #16]
}
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	1ad2      	subs	r2, r2, r3
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ee2:	69b8      	ldr	r0, [r7, #24]
 8005ee4:	f000 f8f8 	bl	80060d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ee8:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <pvPortMalloc+0x17c>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	4a18      	ldr	r2, [pc, #96]	; (8005f54 <pvPortMalloc+0x17c>)
 8005ef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ef6:	4b17      	ldr	r3, [pc, #92]	; (8005f54 <pvPortMalloc+0x17c>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4b18      	ldr	r3, [pc, #96]	; (8005f5c <pvPortMalloc+0x184>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d203      	bcs.n	8005f0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f02:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <pvPortMalloc+0x17c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <pvPortMalloc+0x184>)
 8005f08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <pvPortMalloc+0x178>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	431a      	orrs	r2, r3
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f1e:	f7fe fd35 	bl	800498c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <pvPortMalloc+0x16a>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	60fb      	str	r3, [r7, #12]
}
 8005f3e:	bf00      	nop
 8005f40:	e7fe      	b.n	8005f40 <pvPortMalloc+0x168>
	return pvReturn;
 8005f42:	69fb      	ldr	r3, [r7, #28]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3728      	adds	r7, #40	; 0x28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20001b6c 	.word	0x20001b6c
 8005f50:	20001b78 	.word	0x20001b78
 8005f54:	20001b70 	.word	0x20001b70
 8005f58:	20001b64 	.word	0x20001b64
 8005f5c:	20001b74 	.word	0x20001b74

08005f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d048      	beq.n	8006004 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f72:	2308      	movs	r3, #8
 8005f74:	425b      	negs	r3, r3
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4413      	add	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	4b21      	ldr	r3, [pc, #132]	; (800600c <vPortFree+0xac>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <vPortFree+0x44>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	60fb      	str	r3, [r7, #12]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <vPortFree+0x62>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	60bb      	str	r3, [r7, #8]
}
 8005fbe:	bf00      	nop
 8005fc0:	e7fe      	b.n	8005fc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	4b11      	ldr	r3, [pc, #68]	; (800600c <vPortFree+0xac>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d019      	beq.n	8006004 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d115      	bne.n	8006004 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	; (800600c <vPortFree+0xac>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	401a      	ands	r2, r3
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fe8:	f7fe fcc2 	bl	8004970 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <vPortFree+0xb0>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	4a06      	ldr	r2, [pc, #24]	; (8006010 <vPortFree+0xb0>)
 8005ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ffa:	6938      	ldr	r0, [r7, #16]
 8005ffc:	f000 f86c 	bl	80060d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006000:	f7fe fcc4 	bl	800498c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006004:	bf00      	nop
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20001b78 	.word	0x20001b78
 8006010:	20001b70 	.word	0x20001b70

08006014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800601a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800601e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006020:	4b27      	ldr	r3, [pc, #156]	; (80060c0 <prvHeapInit+0xac>)
 8006022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3307      	adds	r3, #7
 8006032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0307 	bic.w	r3, r3, #7
 800603a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800603c:	68ba      	ldr	r2, [r7, #8]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <prvHeapInit+0xac>)
 8006044:	4413      	add	r3, r2
 8006046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800604c:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <prvHeapInit+0xb0>)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006052:	4b1c      	ldr	r3, [pc, #112]	; (80060c4 <prvHeapInit+0xb0>)
 8006054:	2200      	movs	r2, #0
 8006056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	4413      	add	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006060:	2208      	movs	r2, #8
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0307 	bic.w	r3, r3, #7
 800606e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a15      	ldr	r2, [pc, #84]	; (80060c8 <prvHeapInit+0xb4>)
 8006074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006076:	4b14      	ldr	r3, [pc, #80]	; (80060c8 <prvHeapInit+0xb4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2200      	movs	r2, #0
 800607c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800607e:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <prvHeapInit+0xb4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <prvHeapInit+0xb4>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <prvHeapInit+0xb8>)
 80060a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	4a09      	ldr	r2, [pc, #36]	; (80060d0 <prvHeapInit+0xbc>)
 80060aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80060ac:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <prvHeapInit+0xc0>)
 80060ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060b2:	601a      	str	r2, [r3, #0]
}
 80060b4:	bf00      	nop
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	20000f64 	.word	0x20000f64
 80060c4:	20001b64 	.word	0x20001b64
 80060c8:	20001b6c 	.word	0x20001b6c
 80060cc:	20001b74 	.word	0x20001b74
 80060d0:	20001b70 	.word	0x20001b70
 80060d4:	20001b78 	.word	0x20001b78

080060d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060e0:	4b28      	ldr	r3, [pc, #160]	; (8006184 <prvInsertBlockIntoFreeList+0xac>)
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	e002      	b.n	80060ec <prvInsertBlockIntoFreeList+0x14>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d8f7      	bhi.n	80060e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	4413      	add	r3, r2
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	429a      	cmp	r2, r3
 8006106:	d108      	bne.n	800611a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	441a      	add	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	441a      	add	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d118      	bne.n	8006160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	4b15      	ldr	r3, [pc, #84]	; (8006188 <prvInsertBlockIntoFreeList+0xb0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	429a      	cmp	r2, r3
 8006138:	d00d      	beq.n	8006156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	441a      	add	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	e008      	b.n	8006168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006156:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <prvInsertBlockIntoFreeList+0xb0>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	e003      	b.n	8006168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	429a      	cmp	r2, r3
 800616e:	d002      	beq.n	8006176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20001b64 	.word	0x20001b64
 8006188:	20001b6c 	.word	0x20001b6c

0800618c <__libc_init_array>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	4d0d      	ldr	r5, [pc, #52]	; (80061c4 <__libc_init_array+0x38>)
 8006190:	4c0d      	ldr	r4, [pc, #52]	; (80061c8 <__libc_init_array+0x3c>)
 8006192:	1b64      	subs	r4, r4, r5
 8006194:	10a4      	asrs	r4, r4, #2
 8006196:	2600      	movs	r6, #0
 8006198:	42a6      	cmp	r6, r4
 800619a:	d109      	bne.n	80061b0 <__libc_init_array+0x24>
 800619c:	4d0b      	ldr	r5, [pc, #44]	; (80061cc <__libc_init_array+0x40>)
 800619e:	4c0c      	ldr	r4, [pc, #48]	; (80061d0 <__libc_init_array+0x44>)
 80061a0:	f000 f8f2 	bl	8006388 <_init>
 80061a4:	1b64      	subs	r4, r4, r5
 80061a6:	10a4      	asrs	r4, r4, #2
 80061a8:	2600      	movs	r6, #0
 80061aa:	42a6      	cmp	r6, r4
 80061ac:	d105      	bne.n	80061ba <__libc_init_array+0x2e>
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80061b4:	4798      	blx	r3
 80061b6:	3601      	adds	r6, #1
 80061b8:	e7ee      	b.n	8006198 <__libc_init_array+0xc>
 80061ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80061be:	4798      	blx	r3
 80061c0:	3601      	adds	r6, #1
 80061c2:	e7f2      	b.n	80061aa <__libc_init_array+0x1e>
 80061c4:	080064b0 	.word	0x080064b0
 80061c8:	080064b0 	.word	0x080064b0
 80061cc:	080064b0 	.word	0x080064b0
 80061d0:	080064b4 	.word	0x080064b4

080061d4 <__retarget_lock_acquire_recursive>:
 80061d4:	4770      	bx	lr

080061d6 <__retarget_lock_release_recursive>:
 80061d6:	4770      	bx	lr

080061d8 <memcpy>:
 80061d8:	440a      	add	r2, r1
 80061da:	4291      	cmp	r1, r2
 80061dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80061e0:	d100      	bne.n	80061e4 <memcpy+0xc>
 80061e2:	4770      	bx	lr
 80061e4:	b510      	push	{r4, lr}
 80061e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061ee:	4291      	cmp	r1, r2
 80061f0:	d1f9      	bne.n	80061e6 <memcpy+0xe>
 80061f2:	bd10      	pop	{r4, pc}

080061f4 <memset>:
 80061f4:	4402      	add	r2, r0
 80061f6:	4603      	mov	r3, r0
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d100      	bne.n	80061fe <memset+0xa>
 80061fc:	4770      	bx	lr
 80061fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006202:	e7f9      	b.n	80061f8 <memset+0x4>

08006204 <cleanup_glue>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	460c      	mov	r4, r1
 8006208:	6809      	ldr	r1, [r1, #0]
 800620a:	4605      	mov	r5, r0
 800620c:	b109      	cbz	r1, 8006212 <cleanup_glue+0xe>
 800620e:	f7ff fff9 	bl	8006204 <cleanup_glue>
 8006212:	4621      	mov	r1, r4
 8006214:	4628      	mov	r0, r5
 8006216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800621a:	f000 b869 	b.w	80062f0 <_free_r>
	...

08006220 <_reclaim_reent>:
 8006220:	4b2c      	ldr	r3, [pc, #176]	; (80062d4 <_reclaim_reent+0xb4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4283      	cmp	r3, r0
 8006226:	b570      	push	{r4, r5, r6, lr}
 8006228:	4604      	mov	r4, r0
 800622a:	d051      	beq.n	80062d0 <_reclaim_reent+0xb0>
 800622c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800622e:	b143      	cbz	r3, 8006242 <_reclaim_reent+0x22>
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d14a      	bne.n	80062cc <_reclaim_reent+0xac>
 8006236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	b111      	cbz	r1, 8006242 <_reclaim_reent+0x22>
 800623c:	4620      	mov	r0, r4
 800623e:	f000 f857 	bl	80062f0 <_free_r>
 8006242:	6961      	ldr	r1, [r4, #20]
 8006244:	b111      	cbz	r1, 800624c <_reclaim_reent+0x2c>
 8006246:	4620      	mov	r0, r4
 8006248:	f000 f852 	bl	80062f0 <_free_r>
 800624c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800624e:	b111      	cbz	r1, 8006256 <_reclaim_reent+0x36>
 8006250:	4620      	mov	r0, r4
 8006252:	f000 f84d 	bl	80062f0 <_free_r>
 8006256:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006258:	b111      	cbz	r1, 8006260 <_reclaim_reent+0x40>
 800625a:	4620      	mov	r0, r4
 800625c:	f000 f848 	bl	80062f0 <_free_r>
 8006260:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006262:	b111      	cbz	r1, 800626a <_reclaim_reent+0x4a>
 8006264:	4620      	mov	r0, r4
 8006266:	f000 f843 	bl	80062f0 <_free_r>
 800626a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800626c:	b111      	cbz	r1, 8006274 <_reclaim_reent+0x54>
 800626e:	4620      	mov	r0, r4
 8006270:	f000 f83e 	bl	80062f0 <_free_r>
 8006274:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006276:	b111      	cbz	r1, 800627e <_reclaim_reent+0x5e>
 8006278:	4620      	mov	r0, r4
 800627a:	f000 f839 	bl	80062f0 <_free_r>
 800627e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006280:	b111      	cbz	r1, 8006288 <_reclaim_reent+0x68>
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f834 	bl	80062f0 <_free_r>
 8006288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800628a:	b111      	cbz	r1, 8006292 <_reclaim_reent+0x72>
 800628c:	4620      	mov	r0, r4
 800628e:	f000 f82f 	bl	80062f0 <_free_r>
 8006292:	69a3      	ldr	r3, [r4, #24]
 8006294:	b1e3      	cbz	r3, 80062d0 <_reclaim_reent+0xb0>
 8006296:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006298:	4620      	mov	r0, r4
 800629a:	4798      	blx	r3
 800629c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800629e:	b1b9      	cbz	r1, 80062d0 <_reclaim_reent+0xb0>
 80062a0:	4620      	mov	r0, r4
 80062a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062a6:	f7ff bfad 	b.w	8006204 <cleanup_glue>
 80062aa:	5949      	ldr	r1, [r1, r5]
 80062ac:	b941      	cbnz	r1, 80062c0 <_reclaim_reent+0xa0>
 80062ae:	3504      	adds	r5, #4
 80062b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062b2:	2d80      	cmp	r5, #128	; 0x80
 80062b4:	68d9      	ldr	r1, [r3, #12]
 80062b6:	d1f8      	bne.n	80062aa <_reclaim_reent+0x8a>
 80062b8:	4620      	mov	r0, r4
 80062ba:	f000 f819 	bl	80062f0 <_free_r>
 80062be:	e7ba      	b.n	8006236 <_reclaim_reent+0x16>
 80062c0:	680e      	ldr	r6, [r1, #0]
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 f814 	bl	80062f0 <_free_r>
 80062c8:	4631      	mov	r1, r6
 80062ca:	e7ef      	b.n	80062ac <_reclaim_reent+0x8c>
 80062cc:	2500      	movs	r5, #0
 80062ce:	e7ef      	b.n	80062b0 <_reclaim_reent+0x90>
 80062d0:	bd70      	pop	{r4, r5, r6, pc}
 80062d2:	bf00      	nop
 80062d4:	20000010 	.word	0x20000010

080062d8 <__malloc_lock>:
 80062d8:	4801      	ldr	r0, [pc, #4]	; (80062e0 <__malloc_lock+0x8>)
 80062da:	f7ff bf7b 	b.w	80061d4 <__retarget_lock_acquire_recursive>
 80062de:	bf00      	nop
 80062e0:	20001b7c 	.word	0x20001b7c

080062e4 <__malloc_unlock>:
 80062e4:	4801      	ldr	r0, [pc, #4]	; (80062ec <__malloc_unlock+0x8>)
 80062e6:	f7ff bf76 	b.w	80061d6 <__retarget_lock_release_recursive>
 80062ea:	bf00      	nop
 80062ec:	20001b7c 	.word	0x20001b7c

080062f0 <_free_r>:
 80062f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062f2:	2900      	cmp	r1, #0
 80062f4:	d044      	beq.n	8006380 <_free_r+0x90>
 80062f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062fa:	9001      	str	r0, [sp, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006302:	bfb8      	it	lt
 8006304:	18e4      	addlt	r4, r4, r3
 8006306:	f7ff ffe7 	bl	80062d8 <__malloc_lock>
 800630a:	4a1e      	ldr	r2, [pc, #120]	; (8006384 <_free_r+0x94>)
 800630c:	9801      	ldr	r0, [sp, #4]
 800630e:	6813      	ldr	r3, [r2, #0]
 8006310:	b933      	cbnz	r3, 8006320 <_free_r+0x30>
 8006312:	6063      	str	r3, [r4, #4]
 8006314:	6014      	str	r4, [r2, #0]
 8006316:	b003      	add	sp, #12
 8006318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800631c:	f7ff bfe2 	b.w	80062e4 <__malloc_unlock>
 8006320:	42a3      	cmp	r3, r4
 8006322:	d908      	bls.n	8006336 <_free_r+0x46>
 8006324:	6825      	ldr	r5, [r4, #0]
 8006326:	1961      	adds	r1, r4, r5
 8006328:	428b      	cmp	r3, r1
 800632a:	bf01      	itttt	eq
 800632c:	6819      	ldreq	r1, [r3, #0]
 800632e:	685b      	ldreq	r3, [r3, #4]
 8006330:	1949      	addeq	r1, r1, r5
 8006332:	6021      	streq	r1, [r4, #0]
 8006334:	e7ed      	b.n	8006312 <_free_r+0x22>
 8006336:	461a      	mov	r2, r3
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	b10b      	cbz	r3, 8006340 <_free_r+0x50>
 800633c:	42a3      	cmp	r3, r4
 800633e:	d9fa      	bls.n	8006336 <_free_r+0x46>
 8006340:	6811      	ldr	r1, [r2, #0]
 8006342:	1855      	adds	r5, r2, r1
 8006344:	42a5      	cmp	r5, r4
 8006346:	d10b      	bne.n	8006360 <_free_r+0x70>
 8006348:	6824      	ldr	r4, [r4, #0]
 800634a:	4421      	add	r1, r4
 800634c:	1854      	adds	r4, r2, r1
 800634e:	42a3      	cmp	r3, r4
 8006350:	6011      	str	r1, [r2, #0]
 8006352:	d1e0      	bne.n	8006316 <_free_r+0x26>
 8006354:	681c      	ldr	r4, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	6053      	str	r3, [r2, #4]
 800635a:	4421      	add	r1, r4
 800635c:	6011      	str	r1, [r2, #0]
 800635e:	e7da      	b.n	8006316 <_free_r+0x26>
 8006360:	d902      	bls.n	8006368 <_free_r+0x78>
 8006362:	230c      	movs	r3, #12
 8006364:	6003      	str	r3, [r0, #0]
 8006366:	e7d6      	b.n	8006316 <_free_r+0x26>
 8006368:	6825      	ldr	r5, [r4, #0]
 800636a:	1961      	adds	r1, r4, r5
 800636c:	428b      	cmp	r3, r1
 800636e:	bf04      	itt	eq
 8006370:	6819      	ldreq	r1, [r3, #0]
 8006372:	685b      	ldreq	r3, [r3, #4]
 8006374:	6063      	str	r3, [r4, #4]
 8006376:	bf04      	itt	eq
 8006378:	1949      	addeq	r1, r1, r5
 800637a:	6021      	streq	r1, [r4, #0]
 800637c:	6054      	str	r4, [r2, #4]
 800637e:	e7ca      	b.n	8006316 <_free_r+0x26>
 8006380:	b003      	add	sp, #12
 8006382:	bd30      	pop	{r4, r5, pc}
 8006384:	20001b80 	.word	0x20001b80

08006388 <_init>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	bf00      	nop
 800638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638e:	bc08      	pop	{r3}
 8006390:	469e      	mov	lr, r3
 8006392:	4770      	bx	lr

08006394 <_fini>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	bf00      	nop
 8006398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639a:	bc08      	pop	{r3}
 800639c:	469e      	mov	lr, r3
 800639e:	4770      	bx	lr
